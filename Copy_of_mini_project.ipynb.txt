{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "**To extract the data from computer**"
      ],
      "metadata": {
        "id": "T3KgcdUAZ2lN"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QJ-OmHcASUzu"
      },
      "outputs": [],
      "source": [
        "import os\n",
        "import pandas as pd\n",
        "import numpy as np"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df=pd.read_csv('Cardiovascular_Disease_Dataset.csv')\n",
        "print(df.head(5))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AuuLHlwlToxr",
        "outputId": "2a7bc712-2669-4554-9c31-b56446c3e3ff"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   patientid  age  gender  chestpain  restingBP  serumcholestrol  \\\n",
            "0     103368   53       1          2        171                0   \n",
            "1     119250   40       1          0         94              229   \n",
            "2     119372   49       1          2        133              142   \n",
            "3     132514   43       1          0        138              295   \n",
            "4     146211   31       1          1        199                0   \n",
            "\n",
            "   fastingbloodsugar  restingrelectro  maxheartrate  exerciseangia  oldpeak  \\\n",
            "0                  0                1           147              0      5.3   \n",
            "1                  0                1           115              0      3.7   \n",
            "2                  0                0           202              1      5.0   \n",
            "3                  1                1           153              0      3.2   \n",
            "4                  0                2           136              0      5.3   \n",
            "\n",
            "   slope  noofmajorvessels  target  \n",
            "0      3                 3       1  \n",
            "1      1                 1       0  \n",
            "2      1                 0       0  \n",
            "3      2                 2       1  \n",
            "4      3                 2       1  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(df.info())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jqHBYThfTrjp",
        "outputId": "fb149022-09d5-415b-fd50-f512d7e5e2ef"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 1000 entries, 0 to 999\n",
            "Data columns (total 14 columns):\n",
            " #   Column             Non-Null Count  Dtype  \n",
            "---  ------             --------------  -----  \n",
            " 0   patientid          1000 non-null   int64  \n",
            " 1   age                1000 non-null   int64  \n",
            " 2   gender             1000 non-null   int64  \n",
            " 3   chestpain          1000 non-null   int64  \n",
            " 4   restingBP          1000 non-null   int64  \n",
            " 5   serumcholestrol    1000 non-null   int64  \n",
            " 6   fastingbloodsugar  1000 non-null   int64  \n",
            " 7   restingrelectro    1000 non-null   int64  \n",
            " 8   maxheartrate       1000 non-null   int64  \n",
            " 9   exerciseangia      1000 non-null   int64  \n",
            " 10  oldpeak            1000 non-null   float64\n",
            " 11  slope              1000 non-null   int64  \n",
            " 12  noofmajorvessels   1000 non-null   int64  \n",
            " 13  target             1000 non-null   int64  \n",
            "dtypes: float64(1), int64(13)\n",
            "memory usage: 109.5 KB\n",
            "None\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df=df.dropna()"
      ],
      "metadata": {
        "id": "IYLgkl3vTvBR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        " To assign dependent(x) and independent(y) values"
      ],
      "metadata": {
        "id": "QCjZMAeuT03V"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X=df.drop('target',axis=1)\n",
        "Y=df['target']"
      ],
      "metadata": {
        "id": "7ljHEnxYT_j0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "To enture the data is separated"
      ],
      "metadata": {
        "id": "27pGaBuqUE0I"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(X)\n",
        "print(Y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ag1qDgkXUFoc",
        "outputId": "62c8f6c1-6cf0-47da-e8a9-c20967b9a279"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "     patientid  age  gender  chestpain  restingBP  serumcholestrol  \\\n",
            "0       103368   53       1          2        171                0   \n",
            "1       119250   40       1          0         94              229   \n",
            "2       119372   49       1          2        133              142   \n",
            "3       132514   43       1          0        138              295   \n",
            "4       146211   31       1          1        199                0   \n",
            "..         ...  ...     ...        ...        ...              ...   \n",
            "995    9949544   48       1          2        139              349   \n",
            "996    9953423   47       1          3        143              258   \n",
            "997    9965859   69       1          0        156              434   \n",
            "998    9988507   45       1          1        186              417   \n",
            "999    9990855   25       1          0        158              270   \n",
            "\n",
            "     fastingbloodsugar  restingrelectro  maxheartrate  exerciseangia  oldpeak  \\\n",
            "0                    0                1           147              0      5.3   \n",
            "1                    0                1           115              0      3.7   \n",
            "2                    0                0           202              1      5.0   \n",
            "3                    1                1           153              0      3.2   \n",
            "4                    0                2           136              0      5.3   \n",
            "..                 ...              ...           ...            ...      ...   \n",
            "995                  0                2           183              1      5.6   \n",
            "996                  1                1            98              1      5.7   \n",
            "997                  1                0           196              0      1.4   \n",
            "998                  0                1           117              1      5.9   \n",
            "999                  0                0           143              1      4.7   \n",
            "\n",
            "     slope  noofmajorvessels  \n",
            "0        3                 3  \n",
            "1        1                 1  \n",
            "2        1                 0  \n",
            "3        2                 2  \n",
            "4        3                 2  \n",
            "..     ...               ...  \n",
            "995      2                 2  \n",
            "996      1                 0  \n",
            "997      3                 1  \n",
            "998      3                 2  \n",
            "999      0                 0  \n",
            "\n",
            "[1000 rows x 13 columns]\n",
            "0      1\n",
            "1      0\n",
            "2      0\n",
            "3      1\n",
            "4      1\n",
            "      ..\n",
            "995    1\n",
            "996    0\n",
            "997    1\n",
            "998    1\n",
            "999    0\n",
            "Name: target, Length: 1000, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.25, random_state=48)"
      ],
      "metadata": {
        "id": "hfuU-bcWUIsw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "To convert datatype into float"
      ],
      "metadata": {
        "id": "mH_ylqdAUOOC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X_train= X_train.astype(float)\n",
        "X_test= X_test.astype(float)\n",
        "Y_train= Y_train.astype(float)\n",
        "Y_test= Y_test.astype(float)"
      ],
      "metadata": {
        "id": "aeT-i1RmUO_G"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "READ DATASET AND PREPROCESS THE DATA"
      ],
      "metadata": {
        "id": "4fNDK7F_USbh"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "IMPORT LIBRARIES"
      ],
      "metadata": {
        "id": "zhqQLqBEUWVC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from matplotlib import rcParams\n",
        "from matplotlib.cm import rainbow\n",
        "%matplotlib inline\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.metrics import classification_report\n",
        "from sklearn import *\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import accuracy_score, classification_report"
      ],
      "metadata": {
        "id": "0HgzkxkFUUZB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 320
        },
        "id": "1E1evi3CUeU4",
        "outputId": "e91aa4fe-1886-4fec-d7d9-38fb9347ff34"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          patientid         age       gender    chestpain    restingBP  \\\n",
              "count  1.000000e+03  1000.00000  1000.000000  1000.000000  1000.000000   \n",
              "mean   5.048704e+06    49.24200     0.765000     0.980000   151.747000   \n",
              "std    2.895905e+06    17.86473     0.424211     0.953157    29.965228   \n",
              "min    1.033680e+05    20.00000     0.000000     0.000000    94.000000   \n",
              "25%    2.536440e+06    34.00000     1.000000     0.000000   129.000000   \n",
              "50%    4.952508e+06    49.00000     1.000000     1.000000   147.000000   \n",
              "75%    7.681877e+06    64.25000     1.000000     2.000000   181.000000   \n",
              "max    9.990855e+06    80.00000     1.000000     3.000000   200.000000   \n",
              "\n",
              "       serumcholestrol  fastingbloodsugar  restingrelectro  maxheartrate  \\\n",
              "count      1000.000000        1000.000000      1000.000000   1000.000000   \n",
              "mean        311.447000           0.296000         0.748000    145.477000   \n",
              "std         132.443801           0.456719         0.770123     34.190268   \n",
              "min           0.000000           0.000000         0.000000     71.000000   \n",
              "25%         235.750000           0.000000         0.000000    119.750000   \n",
              "50%         318.000000           0.000000         1.000000    146.000000   \n",
              "75%         404.250000           1.000000         1.000000    175.000000   \n",
              "max         602.000000           1.000000         2.000000    202.000000   \n",
              "\n",
              "       exerciseangia      oldpeak        slope  noofmajorvessels       target  \n",
              "count    1000.000000  1000.000000  1000.000000       1000.000000  1000.000000  \n",
              "mean        0.498000     2.707700     1.540000          1.222000     0.580000  \n",
              "std         0.500246     1.720753     1.003697          0.977585     0.493805  \n",
              "min         0.000000     0.000000     0.000000          0.000000     0.000000  \n",
              "25%         0.000000     1.300000     1.000000          0.000000     0.000000  \n",
              "50%         0.000000     2.400000     2.000000          1.000000     1.000000  \n",
              "75%         1.000000     4.100000     2.000000          2.000000     1.000000  \n",
              "max         1.000000     6.200000     3.000000          3.000000     1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7e3134bb-bd3c-40cb-bd64-8bb88a694f2d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>patientid</th>\n",
              "      <th>age</th>\n",
              "      <th>gender</th>\n",
              "      <th>chestpain</th>\n",
              "      <th>restingBP</th>\n",
              "      <th>serumcholestrol</th>\n",
              "      <th>fastingbloodsugar</th>\n",
              "      <th>restingrelectro</th>\n",
              "      <th>maxheartrate</th>\n",
              "      <th>exerciseangia</th>\n",
              "      <th>oldpeak</th>\n",
              "      <th>slope</th>\n",
              "      <th>noofmajorvessels</th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1.000000e+03</td>\n",
              "      <td>1000.00000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>5.048704e+06</td>\n",
              "      <td>49.24200</td>\n",
              "      <td>0.765000</td>\n",
              "      <td>0.980000</td>\n",
              "      <td>151.747000</td>\n",
              "      <td>311.447000</td>\n",
              "      <td>0.296000</td>\n",
              "      <td>0.748000</td>\n",
              "      <td>145.477000</td>\n",
              "      <td>0.498000</td>\n",
              "      <td>2.707700</td>\n",
              "      <td>1.540000</td>\n",
              "      <td>1.222000</td>\n",
              "      <td>0.580000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>2.895905e+06</td>\n",
              "      <td>17.86473</td>\n",
              "      <td>0.424211</td>\n",
              "      <td>0.953157</td>\n",
              "      <td>29.965228</td>\n",
              "      <td>132.443801</td>\n",
              "      <td>0.456719</td>\n",
              "      <td>0.770123</td>\n",
              "      <td>34.190268</td>\n",
              "      <td>0.500246</td>\n",
              "      <td>1.720753</td>\n",
              "      <td>1.003697</td>\n",
              "      <td>0.977585</td>\n",
              "      <td>0.493805</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.033680e+05</td>\n",
              "      <td>20.00000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>94.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>71.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>2.536440e+06</td>\n",
              "      <td>34.00000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>129.000000</td>\n",
              "      <td>235.750000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>119.750000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.300000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>4.952508e+06</td>\n",
              "      <td>49.00000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>147.000000</td>\n",
              "      <td>318.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>146.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.400000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>7.681877e+06</td>\n",
              "      <td>64.25000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>181.000000</td>\n",
              "      <td>404.250000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>175.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>4.100000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>9.990855e+06</td>\n",
              "      <td>80.00000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>200.000000</td>\n",
              "      <td>602.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>202.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>6.200000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7e3134bb-bd3c-40cb-bd64-8bb88a694f2d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7e3134bb-bd3c-40cb-bd64-8bb88a694f2d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7e3134bb-bd3c-40cb-bd64-8bb88a694f2d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3f866934-6cbc-414f-ab7b-a71685be1a66\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3f866934-6cbc-414f-ab7b-a71685be1a66')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3f866934-6cbc-414f-ab7b-a71685be1a66 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"patientid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3501166.788028006,\n        \"min\": 1000.0,\n        \"max\": 9990855.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          5048704.412,\n          4952508.5,\n          1000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 338.3335809260573,\n        \"min\": 17.864730185048543,\n        \"max\": 1000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          49.242,\n          49.0,\n          1000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 353.29148152892265,\n        \"min\": 0.0,\n        \"max\": 1000.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.765,\n          1.0,\n          0.4242109792956271\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"chestpain\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 353.15409682986837,\n        \"min\": 0.0,\n        \"max\": 1000.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1000.0,\n          0.98,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"restingBP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 310.95475032476446,\n        \"min\": 29.965228280557213,\n        \"max\": 1000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          151.747,\n          147.0,\n          1000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"serumcholestrol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 309.17972719427314,\n        \"min\": 0.0,\n        \"max\": 1000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          311.447,\n          318.0,\n          1000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fastingbloodsugar\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 353.41460257252095,\n        \"min\": 0.0,\n        \"max\": 1000.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.296,\n          1.0,\n          0.45671938057476014\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"restingrelectro\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 353.27524996996425,\n        \"min\": 0.0,\n        \"max\": 1000.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1000.0,\n          0.748,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"maxheartrate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 313.12479837328067,\n        \"min\": 34.190268285660544,\n        \"max\": 1000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          145.477,\n          146.0,\n          1000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"exerciseangia\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 353.40220167048295,\n        \"min\": 0.0,\n        \"max\": 1000.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.498,\n          1.0,\n          0.5002461856388775\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oldpeak\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 352.6275713099593,\n        \"min\": 0.0,\n        \"max\": 1000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2.7077,\n          2.4,\n          1000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"slope\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 353.0219658477109,\n        \"min\": 0.0,\n        \"max\": 1000.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1000.0,\n          1.54,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"noofmajorvessels\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 353.14063338935557,\n        \"min\": 0.0,\n        \"max\": 1000.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1000.0,\n          1.222,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 353.34787682346433,\n        \"min\": 0.0,\n        \"max\": 1000.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.58,\n          1.0,\n          0.49380547166252003\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Total missing percent of data"
      ],
      "metadata": {
        "id": "dV01nMqZUiV-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "missing_data= df.isnull().sum()\n",
        "total_percentage= (missing_data.sum()/df.shape[0]) * 200\n",
        "print(f\"Total percentage of missing data is {round(total_percentage,2)}%\")\n",
        "duplicate=df[df.duplicated()]\n",
        "print(\"duplicate rows:\")\n",
        "duplicate\n",
        "df=df.drop_duplicates()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d7J3xJg7Ufv0",
        "outputId": "fd3baa6c-2cc1-4641-bbad-a49067947fac"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Total percentage of missing data is 0.0%\n",
            "duplicate rows:\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rcParams['figure.figsize'] *10,20\n",
        "plt.matshow(df.corr())\n",
        "plt.yticks(np.arange(df.shape[1]), df.columns)\n",
        "plt.xticks(np.arange(df.shape[1]), df.columns)\n",
        "plt.colorbar()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 432
        },
        "id": "xE1xhqXcUm9c",
        "outputId": "cf17a36f-2e6f-4c0d-bc54-9952e46e969f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.colorbar.Colorbar at 0x78dc5ed41f60>"
            ]
          },
          "metadata": {},
          "execution_count": 16
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 480x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "corr = df.corr()\n",
        "corr.style.background_gradient(cmap='coolwarm')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 508
        },
        "id": "GBPIrgNwUp86",
        "outputId": "39133f88-35a2-4bca-cfe1-3c9a09ac397b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<pandas.io.formats.style.Styler at 0x78dc5ed751e0>"
            ],
            "text/html": [
              "<style type=\"text/css\">\n",
              "#T_4a675_row0_col0, #T_4a675_row1_col1, #T_4a675_row2_col2, #T_4a675_row3_col3, #T_4a675_row4_col4, #T_4a675_row5_col5, #T_4a675_row6_col6, #T_4a675_row7_col7, #T_4a675_row8_col8, #T_4a675_row9_col9, #T_4a675_row10_col10, #T_4a675_row11_col11, #T_4a675_row12_col12, #T_4a675_row13_col13 {\n",
              "  background-color: #b40426;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row0_col1, #T_4a675_row0_col4, #T_4a675_row1_col13, #T_4a675_row2_col12, #T_4a675_row4_col2, #T_4a675_row10_col9, #T_4a675_row13_col1 {\n",
              "  background-color: #485fd1;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row0_col2, #T_4a675_row10_col8 {\n",
              "  background-color: #536edd;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row0_col3, #T_4a675_row7_col9 {\n",
              "  background-color: #3f53c6;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row0_col5, #T_4a675_row8_col4 {\n",
              "  background-color: #6b8df0;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row0_col6, #T_4a675_row13_col9 {\n",
              "  background-color: #3d50c3;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row0_col7, #T_4a675_row0_col11, #T_4a675_row1_col0, #T_4a675_row1_col12, #T_4a675_row6_col10 {\n",
              "  background-color: #465ecf;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row0_col8, #T_4a675_row1_col8, #T_4a675_row1_col10, #T_4a675_row2_col4, #T_4a675_row2_col5, #T_4a675_row2_col7, #T_4a675_row2_col9, #T_4a675_row2_col11, #T_4a675_row5_col2, #T_4a675_row5_col10, #T_4a675_row8_col0, #T_4a675_row8_col1, #T_4a675_row9_col1, #T_4a675_row9_col3, #T_4a675_row9_col6, #T_4a675_row9_col12, #T_4a675_row9_col13 {\n",
              "  background-color: #3b4cc0;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row0_col9, #T_4a675_row1_col3, #T_4a675_row7_col2, #T_4a675_row7_col10, #T_4a675_row8_col9, #T_4a675_row12_col1 {\n",
              "  background-color: #4e68d8;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row0_col10, #T_4a675_row1_col9, #T_4a675_row2_col1, #T_4a675_row2_col6, #T_4a675_row4_col0, #T_4a675_row9_col7, #T_4a675_row10_col1 {\n",
              "  background-color: #3e51c5;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row0_col12, #T_4a675_row1_col6 {\n",
              "  background-color: #455cce;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row0_col13, #T_4a675_row1_col11, #T_4a675_row7_col0, #T_4a675_row9_col11, #T_4a675_row11_col9, #T_4a675_row12_col9 {\n",
              "  background-color: #445acc;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row1_col2, #T_4a675_row10_col5, #T_4a675_row10_col7 {\n",
              "  background-color: #5470de;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row1_col4, #T_4a675_row9_col0 {\n",
              "  background-color: #4961d2;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row1_col5, #T_4a675_row3_col2, #T_4a675_row8_col3, #T_4a675_row8_col7, #T_4a675_row8_col12 {\n",
              "  background-color: #6687ed;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row1_col7 {\n",
              "  background-color: #5b7ae5;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row2_col0, #T_4a675_row4_col9, #T_4a675_row10_col6 {\n",
              "  background-color: #3c4ec2;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row2_col3, #T_4a675_row6_col9, #T_4a675_row9_col2, #T_4a675_row10_col4, #T_4a675_row11_col2 {\n",
              "  background-color: #4c66d6;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row2_col8 {\n",
              "  background-color: #5977e3;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row2_col10 {\n",
              "  background-color: #afcafc;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_4a675_row2_col13, #T_4a675_row9_col8, #T_4a675_row12_col0 {\n",
              "  background-color: #4a63d3;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row3_col0, #T_4a675_row11_col0, #T_4a675_row11_col1 {\n",
              "  background-color: #4257c9;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row3_col1, #T_4a675_row5_col8, #T_4a675_row5_col9 {\n",
              "  background-color: #516ddb;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row3_col4, #T_4a675_row5_col6, #T_4a675_row7_col4 {\n",
              "  background-color: #94b6ff;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_4a675_row3_col5 {\n",
              "  background-color: #92b4fe;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_4a675_row3_col6, #T_4a675_row5_col13, #T_4a675_row12_col5 {\n",
              "  background-color: #84a7fc;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row3_col7 {\n",
              "  background-color: #9bbcff;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_4a675_row3_col8 {\n",
              "  background-color: #6a8bef;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row3_col9, #T_4a675_row4_col1, #T_4a675_row4_col10, #T_4a675_row9_col4, #T_4a675_row9_col10, #T_4a675_row10_col0 {\n",
              "  background-color: #4055c8;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row3_col10, #T_4a675_row13_col2 {\n",
              "  background-color: #6180e9;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row3_col11, #T_4a675_row13_col12 {\n",
              "  background-color: #dcdddd;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_4a675_row3_col12 {\n",
              "  background-color: #9ebeff;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_4a675_row3_col13 {\n",
              "  background-color: #edd1c2;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_4a675_row4_col3, #T_4a675_row6_col4 {\n",
              "  background-color: #8badfd;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_4a675_row4_col5 {\n",
              "  background-color: #82a6fb;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row4_col6, #T_4a675_row5_col4, #T_4a675_row6_col7 {\n",
              "  background-color: #7597f6;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row4_col7, #T_4a675_row11_col5 {\n",
              "  background-color: #8fb1fe;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_4a675_row4_col8, #T_4a675_row6_col8, #T_4a675_row10_col13 {\n",
              "  background-color: #6384eb;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row4_col11 {\n",
              "  background-color: #c3d5f4;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_4a675_row4_col12, #T_4a675_row7_col3 {\n",
              "  background-color: #96b7ff;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_4a675_row4_col13 {\n",
              "  background-color: #dddcdc;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_4a675_row5_col0, #T_4a675_row6_col1, #T_4a675_row8_col6 {\n",
              "  background-color: #5572df;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row5_col1 {\n",
              "  background-color: #506bda;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row5_col3, #T_4a675_row6_col12, #T_4a675_row7_col5 {\n",
              "  background-color: #7a9df8;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row5_col7, #T_4a675_row8_col5 {\n",
              "  background-color: #6788ee;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row5_col11 {\n",
              "  background-color: #7da0f9;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row5_col12 {\n",
              "  background-color: #688aef;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row6_col0 {\n",
              "  background-color: #4b64d5;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row6_col2, #T_4a675_row10_col3 {\n",
              "  background-color: #6282ea;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row6_col3 {\n",
              "  background-color: #8db0fe;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_4a675_row6_col5 {\n",
              "  background-color: #b2ccfb;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_4a675_row6_col11 {\n",
              "  background-color: #97b8ff;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_4a675_row6_col13 {\n",
              "  background-color: #a9c6fd;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_4a675_row7_col1, #T_4a675_row10_col12 {\n",
              "  background-color: #5a78e4;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row7_col6, #T_4a675_row7_col8, #T_4a675_row9_col5, #T_4a675_row12_col2 {\n",
              "  background-color: #6485ec;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row7_col11 {\n",
              "  background-color: #b9d0f9;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_4a675_row7_col12 {\n",
              "  background-color: #81a4fb;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row7_col13 {\n",
              "  background-color: #cedaeb;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_4a675_row8_col2 {\n",
              "  background-color: #6f92f3;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row8_col10 {\n",
              "  background-color: #4f69d9;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row8_col11, #T_4a675_row12_col7 {\n",
              "  background-color: #89acfd;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_4a675_row8_col13, #T_4a675_row13_col8 {\n",
              "  background-color: #90b2fe;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_4a675_row10_col2 {\n",
              "  background-color: #c1d4f4;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_4a675_row10_col11 {\n",
              "  background-color: #8caffe;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_4a675_row11_col3 {\n",
              "  background-color: #d9dce1;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_4a675_row11_col4 {\n",
              "  background-color: #c5d6f2;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_4a675_row11_col6, #T_4a675_row11_col8 {\n",
              "  background-color: #86a9fc;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row11_col7 {\n",
              "  background-color: #b7cff9;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_4a675_row11_col10 {\n",
              "  background-color: #85a8fc;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row11_col12 {\n",
              "  background-color: #e5d8d1;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_4a675_row11_col13, #T_4a675_row13_col11 {\n",
              "  background-color: #ec8165;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row12_col3 {\n",
              "  background-color: #9fbfff;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_4a675_row12_col4 {\n",
              "  background-color: #a2c1ff;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_4a675_row12_col6 {\n",
              "  background-color: #7295f4;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row12_col8 {\n",
              "  background-color: #6c8ff1;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row12_col10 {\n",
              "  background-color: #5d7ce6;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row12_col11 {\n",
              "  background-color: #e9d5cb;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_4a675_row12_col13 {\n",
              "  background-color: #dfdbd9;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_4a675_row13_col0 {\n",
              "  background-color: #4358cb;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_4a675_row13_col3 {\n",
              "  background-color: #ecd3c5;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_4a675_row13_col4 {\n",
              "  background-color: #e1dad6;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_4a675_row13_col5 {\n",
              "  background-color: #98b9ff;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_4a675_row13_col6 {\n",
              "  background-color: #9dbdff;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_4a675_row13_col7 {\n",
              "  background-color: #cfdaea;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_4a675_row13_col10 {\n",
              "  background-color: #5f7fe8;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "</style>\n",
              "<table id=\"T_4a675\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th class=\"blank level0\" >&nbsp;</th>\n",
              "      <th id=\"T_4a675_level0_col0\" class=\"col_heading level0 col0\" >patientid</th>\n",
              "      <th id=\"T_4a675_level0_col1\" class=\"col_heading level0 col1\" >age</th>\n",
              "      <th id=\"T_4a675_level0_col2\" class=\"col_heading level0 col2\" >gender</th>\n",
              "      <th id=\"T_4a675_level0_col3\" class=\"col_heading level0 col3\" >chestpain</th>\n",
              "      <th id=\"T_4a675_level0_col4\" class=\"col_heading level0 col4\" >restingBP</th>\n",
              "      <th id=\"T_4a675_level0_col5\" class=\"col_heading level0 col5\" >serumcholestrol</th>\n",
              "      <th id=\"T_4a675_level0_col6\" class=\"col_heading level0 col6\" >fastingbloodsugar</th>\n",
              "      <th id=\"T_4a675_level0_col7\" class=\"col_heading level0 col7\" >restingrelectro</th>\n",
              "      <th id=\"T_4a675_level0_col8\" class=\"col_heading level0 col8\" >maxheartrate</th>\n",
              "      <th id=\"T_4a675_level0_col9\" class=\"col_heading level0 col9\" >exerciseangia</th>\n",
              "      <th id=\"T_4a675_level0_col10\" class=\"col_heading level0 col10\" >oldpeak</th>\n",
              "      <th id=\"T_4a675_level0_col11\" class=\"col_heading level0 col11\" >slope</th>\n",
              "      <th id=\"T_4a675_level0_col12\" class=\"col_heading level0 col12\" >noofmajorvessels</th>\n",
              "      <th id=\"T_4a675_level0_col13\" class=\"col_heading level0 col13\" >target</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th id=\"T_4a675_level0_row0\" class=\"row_heading level0 row0\" >patientid</th>\n",
              "      <td id=\"T_4a675_row0_col0\" class=\"data row0 col0\" >1.000000</td>\n",
              "      <td id=\"T_4a675_row0_col1\" class=\"data row0 col1\" >0.004978</td>\n",
              "      <td id=\"T_4a675_row0_col2\" class=\"data row0 col2\" >-0.031263</td>\n",
              "      <td id=\"T_4a675_row0_col3\" class=\"data row0 col3\" >-0.009679</td>\n",
              "      <td id=\"T_4a675_row0_col4\" class=\"data row0 col4\" >-0.020926</td>\n",
              "      <td id=\"T_4a675_row0_col5\" class=\"data row0 col5\" >0.053464</td>\n",
              "      <td id=\"T_4a675_row0_col6\" class=\"data row0 col6\" >0.022331</td>\n",
              "      <td id=\"T_4a675_row0_col7\" class=\"data row0 col7\" >-0.003667</td>\n",
              "      <td id=\"T_4a675_row0_col8\" class=\"data row0 col8\" >-0.036486</td>\n",
              "      <td id=\"T_4a675_row0_col9\" class=\"data row0 col9\" >0.014338</td>\n",
              "      <td id=\"T_4a675_row0_col10\" class=\"data row0 col10\" >-0.013825</td>\n",
              "      <td id=\"T_4a675_row0_col11\" class=\"data row0 col11\" >-0.010128</td>\n",
              "      <td id=\"T_4a675_row0_col12\" class=\"data row0 col12\" >0.019465</td>\n",
              "      <td id=\"T_4a675_row0_col13\" class=\"data row0 col13\" >-0.005637</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_4a675_level0_row1\" class=\"row_heading level0 row1\" >age</th>\n",
              "      <td id=\"T_4a675_row1_col0\" class=\"data row1 col0\" >0.004978</td>\n",
              "      <td id=\"T_4a675_row1_col1\" class=\"data row1 col1\" >1.000000</td>\n",
              "      <td id=\"T_4a675_row1_col2\" class=\"data row1 col2\" >-0.024717</td>\n",
              "      <td id=\"T_4a675_row1_col3\" class=\"data row1 col3\" >0.037731</td>\n",
              "      <td id=\"T_4a675_row1_col4\" class=\"data row1 col4\" >-0.016126</td>\n",
              "      <td id=\"T_4a675_row1_col5\" class=\"data row1 col5\" >0.035439</td>\n",
              "      <td id=\"T_4a675_row1_col6\" class=\"data row1 col6\" >0.049732</td>\n",
              "      <td id=\"T_4a675_row1_col7\" class=\"data row1 col7\" >0.067736</td>\n",
              "      <td id=\"T_4a675_row1_col8\" class=\"data row1 col8\" >-0.040092</td>\n",
              "      <td id=\"T_4a675_row1_col9\" class=\"data row1 col9\" >-0.037581</td>\n",
              "      <td id=\"T_4a675_row1_col10\" class=\"data row1 col10\" >-0.026020</td>\n",
              "      <td id=\"T_4a675_row1_col11\" class=\"data row1 col11\" >-0.015334</td>\n",
              "      <td id=\"T_4a675_row1_col12\" class=\"data row1 col12\" >0.025407</td>\n",
              "      <td id=\"T_4a675_row1_col13\" class=\"data row1 col13\" >0.008356</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_4a675_level0_row2\" class=\"row_heading level0 row2\" >gender</th>\n",
              "      <td id=\"T_4a675_row2_col0\" class=\"data row2 col0\" >-0.031263</td>\n",
              "      <td id=\"T_4a675_row2_col1\" class=\"data row2 col1\" >-0.024717</td>\n",
              "      <td id=\"T_4a675_row2_col2\" class=\"data row2 col2\" >1.000000</td>\n",
              "      <td id=\"T_4a675_row2_col3\" class=\"data row2 col3\" >0.035402</td>\n",
              "      <td id=\"T_4a675_row2_col4\" class=\"data row2 col4\" >-0.069727</td>\n",
              "      <td id=\"T_4a675_row2_col5\" class=\"data row2 col5\" >-0.120759</td>\n",
              "      <td id=\"T_4a675_row2_col6\" class=\"data row2 col6\" >0.023560</td>\n",
              "      <td id=\"T_4a675_row2_col7\" class=\"data row2 col7\" >-0.046634</td>\n",
              "      <td id=\"T_4a675_row2_col8\" class=\"data row2 col8\" >0.064606</td>\n",
              "      <td id=\"T_4a675_row2_col9\" class=\"data row2 col9\" >-0.051746</td>\n",
              "      <td id=\"T_4a675_row2_col10\" class=\"data row2 col10\" >0.331457</td>\n",
              "      <td id=\"T_4a675_row2_col11\" class=\"data row2 col11\" >-0.051957</td>\n",
              "      <td id=\"T_4a675_row2_col12\" class=\"data row2 col12\" >0.029376</td>\n",
              "      <td id=\"T_4a675_row2_col13\" class=\"data row2 col13\" >0.015769</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_4a675_level0_row3\" class=\"row_heading level0 row3\" >chestpain</th>\n",
              "      <td id=\"T_4a675_row3_col0\" class=\"data row3 col0\" >-0.009679</td>\n",
              "      <td id=\"T_4a675_row3_col1\" class=\"data row3 col1\" >0.037731</td>\n",
              "      <td id=\"T_4a675_row3_col2\" class=\"data row3 col2\" >0.035402</td>\n",
              "      <td id=\"T_4a675_row3_col3\" class=\"data row3 col3\" >1.000000</td>\n",
              "      <td id=\"T_4a675_row3_col4\" class=\"data row3 col4\" >0.222267</td>\n",
              "      <td id=\"T_4a675_row3_col5\" class=\"data row3 col5\" >0.174731</td>\n",
              "      <td id=\"T_4a675_row3_col6\" class=\"data row3 col6\" >0.232059</td>\n",
              "      <td id=\"T_4a675_row3_col7\" class=\"data row3 col7\" >0.256316</td>\n",
              "      <td id=\"T_4a675_row3_col8\" class=\"data row3 col8\" >0.114496</td>\n",
              "      <td id=\"T_4a675_row3_col9\" class=\"data row3 col9\" >-0.027376</td>\n",
              "      <td id=\"T_4a675_row3_col10\" class=\"data row3 col10\" >0.101345</td>\n",
              "      <td id=\"T_4a675_row3_col11\" class=\"data row3 col11\" >0.472731</td>\n",
              "      <td id=\"T_4a675_row3_col12\" class=\"data row3 col12\" >0.285156</td>\n",
              "      <td id=\"T_4a675_row3_col13\" class=\"data row3 col13\" >0.554228</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_4a675_level0_row4\" class=\"row_heading level0 row4\" >restingBP</th>\n",
              "      <td id=\"T_4a675_row4_col0\" class=\"data row4 col0\" >-0.020926</td>\n",
              "      <td id=\"T_4a675_row4_col1\" class=\"data row4 col1\" >-0.016126</td>\n",
              "      <td id=\"T_4a675_row4_col2\" class=\"data row4 col2\" >-0.069727</td>\n",
              "      <td id=\"T_4a675_row4_col3\" class=\"data row4 col3\" >0.222267</td>\n",
              "      <td id=\"T_4a675_row4_col4\" class=\"data row4 col4\" >1.000000</td>\n",
              "      <td id=\"T_4a675_row4_col5\" class=\"data row4 col5\" >0.126523</td>\n",
              "      <td id=\"T_4a675_row4_col6\" class=\"data row4 col6\" >0.192063</td>\n",
              "      <td id=\"T_4a675_row4_col7\" class=\"data row4 col7\" >0.219887</td>\n",
              "      <td id=\"T_4a675_row4_col8\" class=\"data row4 col8\" >0.095569</td>\n",
              "      <td id=\"T_4a675_row4_col9\" class=\"data row4 col9\" >-0.046545</td>\n",
              "      <td id=\"T_4a675_row4_col10\" class=\"data row4 col10\" >-0.004225</td>\n",
              "      <td id=\"T_4a675_row4_col11\" class=\"data row4 col11\" >0.376711</td>\n",
              "      <td id=\"T_4a675_row4_col12\" class=\"data row4 col12\" >0.263194</td>\n",
              "      <td id=\"T_4a675_row4_col13\" class=\"data row4 col13\" >0.482387</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_4a675_level0_row5\" class=\"row_heading level0 row5\" >serumcholestrol</th>\n",
              "      <td id=\"T_4a675_row5_col0\" class=\"data row5 col0\" >0.053464</td>\n",
              "      <td id=\"T_4a675_row5_col1\" class=\"data row5 col1\" >0.035439</td>\n",
              "      <td id=\"T_4a675_row5_col2\" class=\"data row5 col2\" >-0.120759</td>\n",
              "      <td id=\"T_4a675_row5_col3\" class=\"data row5 col3\" >0.174731</td>\n",
              "      <td id=\"T_4a675_row5_col4\" class=\"data row5 col4\" >0.126523</td>\n",
              "      <td id=\"T_4a675_row5_col5\" class=\"data row5 col5\" >1.000000</td>\n",
              "      <td id=\"T_4a675_row5_col6\" class=\"data row5 col6\" >0.278337</td>\n",
              "      <td id=\"T_4a675_row5_col7\" class=\"data row5 col7\" >0.101767</td>\n",
              "      <td id=\"T_4a675_row5_col8\" class=\"data row5 col8\" >0.038967</td>\n",
              "      <td id=\"T_4a675_row5_col9\" class=\"data row5 col9\" >0.029422</td>\n",
              "      <td id=\"T_4a675_row5_col10\" class=\"data row5 col10\" >-0.025910</td>\n",
              "      <td id=\"T_4a675_row5_col11\" class=\"data row5 col11\" >0.165569</td>\n",
              "      <td id=\"T_4a675_row5_col12\" class=\"data row5 col12\" >0.132419</td>\n",
              "      <td id=\"T_4a675_row5_col13\" class=\"data row5 col13\" >0.195340</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_4a675_level0_row6\" class=\"row_heading level0 row6\" >fastingbloodsugar</th>\n",
              "      <td id=\"T_4a675_row6_col0\" class=\"data row6 col0\" >0.022331</td>\n",
              "      <td id=\"T_4a675_row6_col1\" class=\"data row6 col1\" >0.049732</td>\n",
              "      <td id=\"T_4a675_row6_col2\" class=\"data row6 col2\" >0.023560</td>\n",
              "      <td id=\"T_4a675_row6_col3\" class=\"data row6 col3\" >0.232059</td>\n",
              "      <td id=\"T_4a675_row6_col4\" class=\"data row6 col4\" >0.192063</td>\n",
              "      <td id=\"T_4a675_row6_col5\" class=\"data row6 col5\" >0.278337</td>\n",
              "      <td id=\"T_4a675_row6_col6\" class=\"data row6 col6\" >1.000000</td>\n",
              "      <td id=\"T_4a675_row6_col7\" class=\"data row6 col7\" >0.143982</td>\n",
              "      <td id=\"T_4a675_row6_col8\" class=\"data row6 col8\" >0.096528</td>\n",
              "      <td id=\"T_4a675_row6_col9\" class=\"data row6 col9\" >0.011356</td>\n",
              "      <td id=\"T_4a675_row6_col10\" class=\"data row6 col10\" >0.015311</td>\n",
              "      <td id=\"T_4a675_row6_col11\" class=\"data row6 col11\" >0.242734</td>\n",
              "      <td id=\"T_4a675_row6_col12\" class=\"data row6 col12\" >0.182246</td>\n",
              "      <td id=\"T_4a675_row6_col13\" class=\"data row6 col13\" >0.303233</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_4a675_level0_row7\" class=\"row_heading level0 row7\" >restingrelectro</th>\n",
              "      <td id=\"T_4a675_row7_col0\" class=\"data row7 col0\" >-0.003667</td>\n",
              "      <td id=\"T_4a675_row7_col1\" class=\"data row7 col1\" >0.067736</td>\n",
              "      <td id=\"T_4a675_row7_col2\" class=\"data row7 col2\" >-0.046634</td>\n",
              "      <td id=\"T_4a675_row7_col3\" class=\"data row7 col3\" >0.256316</td>\n",
              "      <td id=\"T_4a675_row7_col4\" class=\"data row7 col4\" >0.219887</td>\n",
              "      <td id=\"T_4a675_row7_col5\" class=\"data row7 col5\" >0.101767</td>\n",
              "      <td id=\"T_4a675_row7_col6\" class=\"data row7 col6\" >0.143982</td>\n",
              "      <td id=\"T_4a675_row7_col7\" class=\"data row7 col7\" >1.000000</td>\n",
              "      <td id=\"T_4a675_row7_col8\" class=\"data row7 col8\" >0.099991</td>\n",
              "      <td id=\"T_4a675_row7_col9\" class=\"data row7 col9\" >-0.032489</td>\n",
              "      <td id=\"T_4a675_row7_col10\" class=\"data row7 col10\" >0.040291</td>\n",
              "      <td id=\"T_4a675_row7_col11\" class=\"data row7 col11\" >0.343280</td>\n",
              "      <td id=\"T_4a675_row7_col12\" class=\"data row7 col12\" >0.204684</td>\n",
              "      <td id=\"T_4a675_row7_col13\" class=\"data row7 col13\" >0.426837</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_4a675_level0_row8\" class=\"row_heading level0 row8\" >maxheartrate</th>\n",
              "      <td id=\"T_4a675_row8_col0\" class=\"data row8 col0\" >-0.036486</td>\n",
              "      <td id=\"T_4a675_row8_col1\" class=\"data row8 col1\" >-0.040092</td>\n",
              "      <td id=\"T_4a675_row8_col2\" class=\"data row8 col2\" >0.064606</td>\n",
              "      <td id=\"T_4a675_row8_col3\" class=\"data row8 col3\" >0.114496</td>\n",
              "      <td id=\"T_4a675_row8_col4\" class=\"data row8 col4\" >0.095569</td>\n",
              "      <td id=\"T_4a675_row8_col5\" class=\"data row8 col5\" >0.038967</td>\n",
              "      <td id=\"T_4a675_row8_col6\" class=\"data row8 col6\" >0.096528</td>\n",
              "      <td id=\"T_4a675_row8_col7\" class=\"data row8 col7\" >0.099991</td>\n",
              "      <td id=\"T_4a675_row8_col8\" class=\"data row8 col8\" >1.000000</td>\n",
              "      <td id=\"T_4a675_row8_col9\" class=\"data row8 col9\" >0.015536</td>\n",
              "      <td id=\"T_4a675_row8_col10\" class=\"data row8 col10\" >0.044614</td>\n",
              "      <td id=\"T_4a675_row8_col11\" class=\"data row8 col11\" >0.201515</td>\n",
              "      <td id=\"T_4a675_row8_col12\" class=\"data row8 col12\" >0.122763</td>\n",
              "      <td id=\"T_4a675_row8_col13\" class=\"data row8 col13\" >0.228343</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_4a675_level0_row9\" class=\"row_heading level0 row9\" >exerciseangia</th>\n",
              "      <td id=\"T_4a675_row9_col0\" class=\"data row9 col0\" >0.014338</td>\n",
              "      <td id=\"T_4a675_row9_col1\" class=\"data row9 col1\" >-0.037581</td>\n",
              "      <td id=\"T_4a675_row9_col2\" class=\"data row9 col2\" >-0.051746</td>\n",
              "      <td id=\"T_4a675_row9_col3\" class=\"data row9 col3\" >-0.027376</td>\n",
              "      <td id=\"T_4a675_row9_col4\" class=\"data row9 col4\" >-0.046545</td>\n",
              "      <td id=\"T_4a675_row9_col5\" class=\"data row9 col5\" >0.029422</td>\n",
              "      <td id=\"T_4a675_row9_col6\" class=\"data row9 col6\" >0.011356</td>\n",
              "      <td id=\"T_4a675_row9_col7\" class=\"data row9 col7\" >-0.032489</td>\n",
              "      <td id=\"T_4a675_row9_col8\" class=\"data row9 col8\" >0.015536</td>\n",
              "      <td id=\"T_4a675_row9_col9\" class=\"data row9 col9\" >1.000000</td>\n",
              "      <td id=\"T_4a675_row9_col10\" class=\"data row9 col10\" >-0.003296</td>\n",
              "      <td id=\"T_4a675_row9_col11\" class=\"data row9 col11\" >-0.017783</td>\n",
              "      <td id=\"T_4a675_row9_col12\" class=\"data row9 col12\" >-0.017513</td>\n",
              "      <td id=\"T_4a675_row9_col13\" class=\"data row9 col13\" >-0.039874</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_4a675_level0_row10\" class=\"row_heading level0 row10\" >oldpeak</th>\n",
              "      <td id=\"T_4a675_row10_col0\" class=\"data row10 col0\" >-0.013825</td>\n",
              "      <td id=\"T_4a675_row10_col1\" class=\"data row10 col1\" >-0.026020</td>\n",
              "      <td id=\"T_4a675_row10_col2\" class=\"data row10 col2\" >0.331457</td>\n",
              "      <td id=\"T_4a675_row10_col3\" class=\"data row10 col3\" >0.101345</td>\n",
              "      <td id=\"T_4a675_row10_col4\" class=\"data row10 col4\" >-0.004225</td>\n",
              "      <td id=\"T_4a675_row10_col5\" class=\"data row10 col5\" >-0.025910</td>\n",
              "      <td id=\"T_4a675_row10_col6\" class=\"data row10 col6\" >0.015311</td>\n",
              "      <td id=\"T_4a675_row10_col7\" class=\"data row10 col7\" >0.040291</td>\n",
              "      <td id=\"T_4a675_row10_col8\" class=\"data row10 col8\" >0.044614</td>\n",
              "      <td id=\"T_4a675_row10_col9\" class=\"data row10 col9\" >-0.003296</td>\n",
              "      <td id=\"T_4a675_row10_col10\" class=\"data row10 col10\" >1.000000</td>\n",
              "      <td id=\"T_4a675_row10_col11\" class=\"data row10 col11\" >0.208789</td>\n",
              "      <td id=\"T_4a675_row10_col12\" class=\"data row10 col12\" >0.086992</td>\n",
              "      <td id=\"T_4a675_row10_col13\" class=\"data row10 col13\" >0.098053</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_4a675_level0_row11\" class=\"row_heading level0 row11\" >slope</th>\n",
              "      <td id=\"T_4a675_row11_col0\" class=\"data row11 col0\" >-0.010128</td>\n",
              "      <td id=\"T_4a675_row11_col1\" class=\"data row11 col1\" >-0.015334</td>\n",
              "      <td id=\"T_4a675_row11_col2\" class=\"data row11 col2\" >-0.051957</td>\n",
              "      <td id=\"T_4a675_row11_col3\" class=\"data row11 col3\" >0.472731</td>\n",
              "      <td id=\"T_4a675_row11_col4\" class=\"data row11 col4\" >0.376711</td>\n",
              "      <td id=\"T_4a675_row11_col5\" class=\"data row11 col5\" >0.165569</td>\n",
              "      <td id=\"T_4a675_row11_col6\" class=\"data row11 col6\" >0.242734</td>\n",
              "      <td id=\"T_4a675_row11_col7\" class=\"data row11 col7\" >0.343280</td>\n",
              "      <td id=\"T_4a675_row11_col8\" class=\"data row11 col8\" >0.201515</td>\n",
              "      <td id=\"T_4a675_row11_col9\" class=\"data row11 col9\" >-0.017783</td>\n",
              "      <td id=\"T_4a675_row11_col10\" class=\"data row11 col10\" >0.208789</td>\n",
              "      <td id=\"T_4a675_row11_col11\" class=\"data row11 col11\" >1.000000</td>\n",
              "      <td id=\"T_4a675_row11_col12\" class=\"data row11 col12\" >0.526536</td>\n",
              "      <td id=\"T_4a675_row11_col13\" class=\"data row11 col13\" >0.797358</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_4a675_level0_row12\" class=\"row_heading level0 row12\" >noofmajorvessels</th>\n",
              "      <td id=\"T_4a675_row12_col0\" class=\"data row12 col0\" >0.019465</td>\n",
              "      <td id=\"T_4a675_row12_col1\" class=\"data row12 col1\" >0.025407</td>\n",
              "      <td id=\"T_4a675_row12_col2\" class=\"data row12 col2\" >0.029376</td>\n",
              "      <td id=\"T_4a675_row12_col3\" class=\"data row12 col3\" >0.285156</td>\n",
              "      <td id=\"T_4a675_row12_col4\" class=\"data row12 col4\" >0.263194</td>\n",
              "      <td id=\"T_4a675_row12_col5\" class=\"data row12 col5\" >0.132419</td>\n",
              "      <td id=\"T_4a675_row12_col6\" class=\"data row12 col6\" >0.182246</td>\n",
              "      <td id=\"T_4a675_row12_col7\" class=\"data row12 col7\" >0.204684</td>\n",
              "      <td id=\"T_4a675_row12_col8\" class=\"data row12 col8\" >0.122763</td>\n",
              "      <td id=\"T_4a675_row12_col9\" class=\"data row12 col9\" >-0.017513</td>\n",
              "      <td id=\"T_4a675_row12_col10\" class=\"data row12 col10\" >0.086992</td>\n",
              "      <td id=\"T_4a675_row12_col11\" class=\"data row12 col11\" >0.526536</td>\n",
              "      <td id=\"T_4a675_row12_col12\" class=\"data row12 col12\" >1.000000</td>\n",
              "      <td id=\"T_4a675_row12_col13\" class=\"data row12 col13\" >0.489866</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_4a675_level0_row13\" class=\"row_heading level0 row13\" >target</th>\n",
              "      <td id=\"T_4a675_row13_col0\" class=\"data row13 col0\" >-0.005637</td>\n",
              "      <td id=\"T_4a675_row13_col1\" class=\"data row13 col1\" >0.008356</td>\n",
              "      <td id=\"T_4a675_row13_col2\" class=\"data row13 col2\" >0.015769</td>\n",
              "      <td id=\"T_4a675_row13_col3\" class=\"data row13 col3\" >0.554228</td>\n",
              "      <td id=\"T_4a675_row13_col4\" class=\"data row13 col4\" >0.482387</td>\n",
              "      <td id=\"T_4a675_row13_col5\" class=\"data row13 col5\" >0.195340</td>\n",
              "      <td id=\"T_4a675_row13_col6\" class=\"data row13 col6\" >0.303233</td>\n",
              "      <td id=\"T_4a675_row13_col7\" class=\"data row13 col7\" >0.426837</td>\n",
              "      <td id=\"T_4a675_row13_col8\" class=\"data row13 col8\" >0.228343</td>\n",
              "      <td id=\"T_4a675_row13_col9\" class=\"data row13 col9\" >-0.039874</td>\n",
              "      <td id=\"T_4a675_row13_col10\" class=\"data row13 col10\" >0.098053</td>\n",
              "      <td id=\"T_4a675_row13_col11\" class=\"data row13 col11\" >0.797358</td>\n",
              "      <td id=\"T_4a675_row13_col12\" class=\"data row13 col12\" >0.489866</td>\n",
              "      <td id=\"T_4a675_row13_col13\" class=\"data row13 col13\" >1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Count of each Target class"
      ],
      "metadata": {
        "id": "N4Ut84Y3Us2f"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "rcParams['figure.figsize'] = 8,6\n",
        "unique_targets = np.unique(df['target'])\n",
        "target_counts = df['target'].value_counts()\n",
        "plt.bar(unique_targets, target_counts, color=['black', 'silver'])\n",
        "plt.xticks([0, 1])\n",
        "plt.xlabel('Target Class')\n",
        "plt.ylabel('Count')\n",
        "plt.title('Count of Each Target Class')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 582
        },
        "id": "aLntKixUUtor",
        "outputId": "40e4e58d-c541-4bbc-902e-d08c54598b8f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Count of Each Target Class')"
            ]
          },
          "metadata": {},
          "execution_count": 18
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Divide data into training and testing classes"
      ],
      "metadata": {
        "id": "4XT8zz_xUy2A"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X = df.drop(['target'], axis = 1)\n",
        "y = df['target']\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.30, random_state=0)\n",
        "print(\"X_train->\",X_train.shape[0],\"XTest->\",X_test.shape[0])\n",
        "print(\"y_train->\",y_train.shape[0],\"yTest->\",y_test.shape[0])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w8VKtbA5Uw7u",
        "outputId": "96abf5c3-8044-4824-848f-c9b80d94f1f7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "X_train-> 700 XTest-> 300\n",
            "y_train-> 700 yTest-> 300\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "MODEL BUILDING"
      ],
      "metadata": {
        "id": "rxh_CUmiU22Q"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "KNN algorithm"
      ],
      "metadata": {
        "id": "n0dqMK2lU3mO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "knn_scores = []\n",
        "for k in range(2, 21):\n",
        "    knn_classifier = KNeighborsClassifier(n_neighbors = k)\n",
        "    knn_classifier.fit(X_train.values, y_train.values)\n",
        "    knn_score=round(knn_classifier.score(X_test.values, y_test.values),2)\n",
        "    knn_scores.append(knn_score)\n",
        "knn_classifier = KNeighborsClassifier(n_neighbors = 5)\n",
        "knn_classifier.fit(X_train, y_train)\n",
        "knn_score=knn_classifier.predict(X_test)\n",
        "print(classification_report(y_test,knn_score))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tWIHzrVMU5nc",
        "outputId": "4585c5b7-a212-400f-f47b-e25a24f26ecb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.44      0.31      0.36       139\n",
            "           1       0.52      0.66      0.58       161\n",
            "\n",
            "    accuracy                           0.50       300\n",
            "   macro avg       0.48      0.48      0.47       300\n",
            "weighted avg       0.48      0.50      0.48       300\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot([k for k in range(2, 21)], knn_scores, color = 'red')\n",
        "for i in range(1, 21):\n",
        "    plt.text(i, knn_scores[i-2], (i, knn_scores[i-2]))\n",
        "plt.xticks([i for i in range(2, 21)])\n",
        "plt.xlabel('Number of Neighbors (K)')\n",
        "plt.ylabel('Scores')\n",
        "plt.title('K Neighbors Classifier scores for different K values')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 582
        },
        "id": "6Qnd1rN7VC2q",
        "outputId": "349de449-beaa-4283-a35d-7805f01a5e69"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'K Neighbors Classifier scores for different K values')"
            ]
          },
          "metadata": {},
          "execution_count": 21
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "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XVtYWloKf39/ceDAgQL1joyMFMHBwaJSpUrCxsZGvPLKK+LYsWMqy3jxOc3MzBTjx48XTZs2FXZ2dsLW1lY0bdpUfP/99wWf2EL8999/YtiwYcLHx0dYWFgIOzs70aZNG7Fo0SKloQBVDW340UcfCXd3d2FtbS3atGkjIiIiCgwzt3TpUtG+fXtRtWpVYWlpKWrWrCnGjx8vkpOTNTqH0gxtKIQQMTExYtCgQcLNzU2Ym5uLatWqie7du4s//vhDsU1R711Vijs3ubi4ODFo0CDh7OwsLC0tRY0aNcSIESOUhoiLiYkRffv2FY6OjsLKykoEBgaKbdu2KR2nqM+GENJQb6+//rqiPt7e3qJ///5i3759QojSvV+KKvvvv/8Wbdq0EdbW1sLe3l689tpr4tKlS0rbFPb5Kcq5c+dEUFCQsLKyEtWqVRMzZ84UK1as0PrQhkIIkZCQIEaMGCE8PT2Fubm5cHNzEx06dBA//vijWs+BEMU//0U9D6q+R65cuSLat28vrK2tBYAihzks6tyOHDkirK2tha+vr7hz506hxxBCGqbR09NTABCff/65ysdnz54tvL29Fd9r27ZtU/n5xAtDGwohxJ49e0SjRo2EhYWFqFu3rli7dq3K72UhhNi4caNo27atsLW1Fba2tqJevXpixIgR4urVq0IIIa5fvy7eeecdUbNmTWFlZSWqVKkiXnnlFfH3338XeY5EJSUTohx6hxERAGmoMn9/f6xdu1brQ6kRERGR4WHOOFEZSU9PL7BuwYIFMDExQfv27XVQIyIiItI3zBknKiNffvklzpw5g1deeQVmZmbYuXMndu7cieHDh5dqwiIiIiIyHkxTISoje/fuxWeffYZLly7h6dOn8PLywttvv41PP/1U62OUExERkWFiME5EREREpCPMGSciIiIi0hEG40REREREOsLEVRVyc3Nx9+5d2NnZlWpyFiIiIiIqG0IIPHnyBB4eHsVOYqbPGIyrcPfuXY52QURERGQAbt26herVq+u6GiXGYFwF+XTTt27dgr29vY5rQ0REREQvSklJgaenpyJuM1QMxlWQp6bY29szGCciIiLSY4aeUmy4CTZERERERAaOwTgRERERkY4wGCciIiIi0hEG40REREREOsJgnIiIiIhIRxiMExERERHpCINxIiIiIiIdYTCuwuPHjwEAcXFxOq6JdmRlZcHHxwenT5/WdVWIiIionDx69AguLi64ceNGhSn74cOHcHFxwe3bt8u1XADYtWsX/Pz8kJubq9F+DMZVmD9/PgDA29tbsW7UqFEICAiApaUl/Pz8SnzsDRs2oF69erCyskLjxo2xY8eOIrc/ePAgZDJZgVt8fLzK7b/44gvIZDKMGTNGsc7CwgIff/wxJk6cWOJ6ExERkWGZNWsWevbsCR8fH8U6deKZ9evXw8/PDzY2NvD29sa8efNKVHbt2rXx8ssvK2Kezp07w9PTE9bW1qhfvz6+/fZbpX1Wr15dIN4xNzcvtAx5rPP9998r1jk5OWHgwIHo1KkTqlatikqVKqFPnz5ISEgosr6DBw8uUHaXLl1UbpuZmQk/Pz/IZDJERUUp1nfp0gXm5ub45Zdfinl2lDEYf0FaWhrWrFmj8rF33nkHoaGhJT72sWPHMGDAAAwdOhRnz55Fr1690KtXL1y4cKHYfa9evYp79+4pbi4uLgW2OXXqFJYuXYomTZoUeOzNN9/E0aNHcfHixRLXn4iIiAxDWloaVqxYgaFDhxZ4rKh4ZufOnXjzzTfx/vvv48KFC/j+++/xzTff4LvvvtOo7CVLluDkyZMIDw9HZGQkqlSpgkOHDmHRokW4ePEiPv30U0yePFnpuA8ePAAAvPfeezh06BBmzZoFIQR2795doIzNmzcXesX/3r17uHLlClasWIFDhw7h7t27eP3114utd5cuXZRird9++03ldhMmTICHh4fKxwYPHoyFCxcWW5YSQUo2bNggnJycBACRnJxc4PHw8HDRtGnTEh27f//+IiQkRGldixYtxHvvvVfoPgcOHBAARGJiYpHHfvLkiahdu7bYu3evCAoKEqNHjy6wzSuvvCKmTJlSkqoTERGRAdmwYYNwdnYu9PHC4pkBAwaIvn37Kq1buHChqF69usjNzVW7bDMzMzFixAjFupycHOHh4SHmzJmjWPfBBx+IV155RXG/a9euwsTEROlYoaGhIjg4WGnd7du3RbVq1cTx48cFAKVjJiUlCXNzc+Hi4iKWL18uhBDi8uXLAoCIiIgotM5hYWGiZ8+exZ7bjh07RL169cTFixcFAHH27Fmlx+Pi4gQAce3atWKPJceW8RccOXKkVGkoRYmIiEDHjh2V1gUHByMiIqLYff38/ODu7o5OnTrhn3/+KfD4iBEjEBISUuD4+QUGBuLIkSOaV5yIiIgMypEjRxAQEKDxfpmZmbCyslJaZ21tjdu3b6vdl+7gwYN49uyZUkxiYmKCjh07KsU8ycnJqFKliuJ+TEwMhBDw9vaGp6cnevbsiUaNGintk5ubi7fffhvjx49H/fr1C5R95swZZGdno02bNoqYp169evDy8io23jp48CBcXFxQt25d/O9//8OjR4+UHk9ISMCwYcOwZs0a2NjYqDyGl5cXXF1dNYq3GIy/IC4uDm5ubmVy7Pj4eLi6uiqtc3V1LTT/GwDc3d2xZMkSbNy4ERs3boSnpydefvllREZGKrb5/fffERkZiTlz5hRZvoeHh9F0SiUiIqLCxcXFFZpKUZTg4GBs2rQJ+/btQ25uLv777z989dVXAKT0D3Vcu3YNAIqMeY4dO4Z169Zh+PDhisfT09PRp08fbNmyBWvXrkVubi5mz56NlJQUpKenAwDmzp0LMzMzjBo1SmXZ8fHxsLCwgI+Pj1LMU1y81aVLF/z888/Yt28f5s6di0OHDqFr167IyckBAAghMHjwYLz//vto3rx5keevabxlpvaWFUR6ejqcnZ11XQ2FunXrom7duor7rVu3RkxMDL755husWbMGt27dwujRo7F3794Cv2RfZG1tjbS0tLKuMhEREelYenp6sXGBKsOGDUNMTAy6d++O7Oxs2NvbY/To0Zg+fTpMTNRrw83IyCjy8QsXLqBnz54IDw9H586dFeutrKzQrFkzRYZC69at4eXlpQjEz5w5g2+//RaRkZGQyWRFlqFpzPPGG28olhs3bowmTZqgZs2aOHjwIDp06IBFixbhyZMnmDx5crHH0rRsvWgZX7x4MXx8fGBlZYUWLVrg5MmThW6rqqdtUW+2999/HzKZDAsWLFCrLk5OTkhKStLwDNTj5uZWoDdvQkKCxi3xgYGBil+dZ86cwf3799GsWTOYmZnBzMwMhw4dwsKFC2FmZqb4RQdIQzbq0w8NIiIiKhtOTk5ITEzUeD+ZTIa5c+fi6dOniIuLQ3x8PAIDAwEANWrUUOsY7u7ukMlkKmMeW1tbdOjQAcOHD8eUKVOUHn8xTjI3N0f16tVhbm4Oa2trHDlyBPfv34eXlxfMzMwUKS6ffvqpYsQYNzc3ZGVl4d69e0oxj6bxVo0aNeDk5KSIt/bv34+IiAhYWlrCzMwMtWrVAgA0b94cYWFhSvtqGm/pPBhft24dxo0bp+ht27RpUwQHB+P+/fuF7mNvb6/U27WwSwGbN2/G8ePHNbpM4+/vj6tXr2p8Hupo1aoV9u3bp7Ru7969aNWqlUbHiYqKgru7OwCgQ4cOOH/+PKKiohS35s2b480330RUVBRMTU0V+124cAH+/v6lPxEiIiLSa/7+/rh06VKJ9zc1NUW1atVgYWGB3377Da1atVI7wAwICIC1tbVSzJObm4tdu3bh1KlTCAsLw6xZswrs92KclJOTg6tXryriuLfffhvnzp1TxDtHjx4FIA3XKB9xJSAgAObm5oiIiFDEPFevXsXNmzc1irdu376NR48eKeKthQsX4t9//1WULR+aet26dUrnkpGRgZiYGI3iLZ2nqXz99dcYNmwYhgwZAgBYsmQJtm/fjpUrV2LSpEkq95HJZMX+urlz5w5GjhyJ3bt3IyQkRO36BAcHq7wEce3aNTx9+hTx8fFIT09XjCvZoEEDWFhYqHXs0aNHIygoCF999RVCQkLw+++/4/Tp0/jxxx8V20yePBl37tzBzz//DABYsGABfH190bBhQ2RkZGD58uXYv38/9uzZAwCws7NDo0aNlMqxtbVF1apVC6w/cuQIZs6cqfZzQURERAYkOxs4eBB48gTBpqaYfOECEn/+GZUrVVJscu3ePTzNyEB8RATSHzxA1PN88AbVq8PC3BwPU1LwR0QEXm7YEBnZ2Vi1fz82/P03Ds2YAWzaVHwdrK0RHByMSZMm4ccff0Tz5s0RGBiIadOm4cGDB+jTpw/GjRuH+Ph4jBw5Eh4eHorxxrOyshAdHY3hw4cjODgYc+bMwZMnTxTzv1StWhVVq1ZVFJWSkgJAygeXp/Q6ODggLCwMK1asgJOTE86cOYORI0eiVatWaNmypWLfevXqYc6cOejduzeePn2Kzz77DH369IGbmxtiYmIwYcIE1KpVC8HBwQCkjpn5VXr+nNasWRPVq1dXrD9+/DgsLS01a2hVe9yVMpCZmSlMTU3F5s2bldYPGjRI9OjRQ+U+q1atEqampsLLy0tUr15d9OjRQ1y4cEFpm5ycHPHKK6+IBQsWCCGE8Pb2Ft98802h9cjIyBDJycmKm5+fX4GhDYOCggSAArfY2FjFNgDEqlWrijzn9evXizp16ggLCwvRsGFDsX37dqXHw8LCRFBQkOL+3LlzRc2aNYWVlZWoUqWKePnll8X+/fuLLEPV0IbHjh0Tjo6OIi0trch9iYiIyEAtWCAEoLgFAmJJvvsCEEEqYhkAIvb54w8A0RIQtoCwAUQHQBx/4Rixz/c58MJ6AQhRvboQQojAwEARGhoqvLy8hIWFhfDw8FBZrq2traL6Y8aMES4uLkImkwkAwsbGRkyfPl3pFFetWiXk4WtycnKBoQ2FEGL16tXC0dFRVK5cWdjY2IjevXuLe/fuKW2TP2ZLS0sTnTt3Fs7OzsLc3Fx4e3uLYcOGifj4+EKf6tjYWJVDGw4fPrzIIatVkT2vkE7cvXsX1apVw7Fjx5R+QUyYMAGHDh3CiRMnCuwTERGB6OhoNGnSBMnJyZg/fz4OHz6MixcvKn6ZzJkzBwcOHMDu3bshk8ng4+ODMWPGKM1Kmd/06dPx2WefFVifmJgIR0dHtc4lNjYWderUwaVLl1C7dm219ilPoaGhaNq0KT755BNdV4WIiIjKQq9ewJYtQO3agIsLtj9+jPE3buCCvz9MiunwqIkDSUl4/coVXG/eHJXNXkiycHEBNm3C9u3bMX78eFy4cEHtjp/qCA8Px6FDh3Dw4EGkpKTAwcEBycnJsLe3V2zTsmVLjBo1CgMHDtRauep4+PAh6tati9OnT8PX11ft/XSepqKpVq1aKQXurVu3Rv369bF06VLMnDlTo562cpMnT8a4ceMU91NSUuDp6Ym7d++qHYzv2LEDw4cP18tAPCsrC40bN8bYsWN1XRUiIiIqK2fOSH+XLwfat0cIgOgFC3CnTx94enpqrZgd48fjk7AwVB4/vtBtQkJCEB0djTt37mi17J07dxY5G+jDhw/x+uuvY8CAAVorU103btzA999/r1EgDgA6bRnPysqCjY0N/vjjD/Tq1UuxPiwsDElJSdiyZYtax+nXrx/MzMzw22+/YcGCBRg3bpzSr7CcnByYmJjA09MTN27cKPZ4hf3SIiIiItJL9+8Drq6ATAYkJwN2drquUZkzlnhNp6OpWFhYICAgoEBv23379qmd+J6Tk4Pz588reru+2NM2KioKHh4eGD9+vKKnLREREZFRkbeK16lTIQJxY6LzNJVx48YhLCxM0dt2wYIFSE1NVYyuMmjQIFSrVk0xu+SMGTPQsmVL1KpVC0lJSZg3bx7i4uLw7rvvAijY0xaQxql0c3NTmjyHiIiIyGjIZ+YOCNBtPUhjOg/GQ0ND8eDBA0ybNg3x8fHw8/PDrl27FFOo3rx5UynlJDExEcOGDUN8fDwqV66MgIAAHDt2DA0aNNDVKRARERHplrxlnMG4wdFpzri+MpYcJCIiIqogvL2BmzelccaDgnRdm3JhLPGazmfgJCIiIqJSePhQCsQBgDNtGxwG40RERESGLH/nTQNuIa6oGIwTERERGTLmixs0BuNEREREhkwejDdrptt6UIkwGCciIiIyZGwZN2gMxomIiIgM1aNHQFyctMyWcYPEYJyIiIjIUMlbxWvVAhwcdFsXKhEG40RERESGijNvGjwG40RERESGivniBo/BOBEREZGhYjBu8BiMExERERmix4+B2FhpmZ03DRaDcSIiIiJDJM8Xr1kTcHTUaVWo5BiMExERERkipqgYBQbjRERERIaIM28aBQbjRERERIaILeNGgcE4ERERkaFJTASuX5eW2TJu0BiMExERERkaeedNX1+gShXd1oVKhcE4ERERkaHhzJtGg8E4ERERkaFhvrjRYDBOREREZGgYjBsNBuNEREREhiQ5Gbh2TVpm502Dx2CciIiIyJDI88V9fICqVXVaFSo9BuNEREREhoST/RgVBuNEREREhoT54kaFwTgRERGRIWEwblQYjBMREREZiuRkIDpaWmYwbhQYjBMREREZirNnpb9eXoCTk27rQlrBYJyIiIjIUHDmTaPDYJyIiIjIUDBf3OgwGCciIiIyFAzGjQ6DcSIiIiJD8OQJ8N9/0jLHGDcaDMaJiIiIDMHZs4AQQPXqgIuLrmtDWsJgnIiIiMgQMEXFKDEYJyIiIjIEDMaNEoNxIiIiIkPAYNwoMRgnIiIi0ndPngBXr0rLDMaNCoNxIiIiIn0XFSV13qxWDXB11XVtSIsYjBMRERHpO868abQYjBMRERHpO+aLGy0G40RERET6jsG40WIwTkRERKTPUlOBK1ekZQbjRkcvgvHFixfDx8cHVlZWaNGiBU6ePFnotqtXr4ZMJlO6WVlZKW0zffp01KtXD7a2tqhcuTI6duyIEydOlPVpEBEREWlfVBSQmwu4uwNubrquDWmZzoPxdevWYdy4cQgPD0dkZCSaNm2K4OBg3L9/v9B97O3tce/ePcUtLi5O6fE6dergu+++w/nz53H06FH4+Pigc+fOePDgQVmfDhEREZF2MUXFqOk8GP/6668xbNgwDBkyBA0aNMCSJUtgY2ODlStXFrqPTCaDm5ub4ub6whA/AwcORMeOHVGjRg00bNgQX3/9NVJSUnDu3LmyPh0iIiIi7WIwbtR0GoxnZWXhzJkz6Nixo2KdiYkJOnbsiIiIiEL3e/r0Kby9veHp6YmePXvi4sWLRZbx448/wsHBAU2bNlW5TWZmJlJSUpRuRERERHqBwbhR02kw/vDhQ+Tk5BRo2XZ1dUV8fLzKferWrYuVK1diy5YtWLt2LXJzc9G6dWvcvn1babtt27ahUqVKsLKywjfffIO9e/fCyclJ5THnzJkDBwcHxc3T01M7J0hERERUGqmpwOXL0jKDcaOk8zQVTbVq1QqDBg2Cn58fgoKCsGnTJjg7O2Pp0qVK273yyiuIiorCsWPH0KVLF/Tv37/QPPTJkycjOTlZcbt161Z5nAoRERFR0f79V+q86eYGeHjoujZUBnQajDs5OcHU1BQJCQlK6xMSEuCmZm9hc3Nz+Pv749q1a0rrbW1tUatWLbRs2RIrVqyAmZkZVqxYofIYlpaWsLe3V7oRERER6Rxn3jR6Og3GLSwsEBAQgH379inW5ebmYt++fWjVqpVax8jJycH58+fh7u5e5Ha5ubnIzMwsVX2JiIiIyhXzxY2ema4rMG7cOISFhaF58+YIDAzEggULkJqaiiFDhgAABg0ahGrVqmHOnDkAgBkzZqBly5aoVasWkpKSMG/ePMTFxeHdd98FAKSmpmLWrFno0aMH3N3d8fDhQyxevBh37txBv379dHaeRERERBpjMG70dB6Mh4aG4sGDB5g2bRri4+Ph5+eHXbt2KTp13rx5EyYmeQ34iYmJGDZsGOLj41G5cmUEBATg2LFjaNCgAQDA1NQUV65cwU8//YSHDx+iatWqeOmll3DkyBE0bNhQJ+dIREREpLH0dODSJWm5WTPd1oXKjEwIIXRdCX2TkpICBwcHJCcnM3+ciIiIdOP4caBVK8DFBYiPB2QyXddIrxhLvGZwo6kQERERVQj5U1QYiBstBuNERERE+oj54hUCg3EiIiIifcRgvEJgME5ERESkb9LTgYsXpWUG40aNwTgRERGRvjl3DsjJAZydgerVdV0bKkMMxomIiIj0Tf6ZN9l506gxGCciIiLSN8wXrzAYjBMRERHpGwbjFQaDcSIiIiJ9kpEBXLggLXPmTaPHYJyIiIhIn5w/Dzx7BlStCnh56bo2VMYYjBMRERHpE868WaEwGCciIiLSJ8wXr1AYjBMRERHpEwbjFQqDcSIiIiJ9kZmZ13mTwXiFwGCciIiISF+cPw9kZwNVqgDe3rquDZUDBuNERERE+oIzb1Y4DMaJiIiI9AXzxSscBuNERERE+kIejHOynwqDwTgRERGRPsjKknLGAbaMVyAMxomIiIj0wYULUkBeuTLg66vr2lA5YTBOREREpA/yp6iw82aFwWCciIiISB+w82aFxGCciIiISB8wGK+QGIwTERER6VpWFnDunLTMYLxCYTBOREREpGsXL0oBuaMjUKOGrmtD5YjBOBEREZGuyWfeZOfNCofBOBEREZGucbKfCovBOBEREZGusfNmhcVgnIiIiEiXsrOBf/+VlhmMVzgMxomIiIh06dIlIDMTsLcHatbUdW2onDEYJyIiItKl/PniJgzNKhq+4kRERES6xHzxCo3BOBEREZEuMRiv0BiMExEREenKs2fsvFnBMRgnIiIi0pVLl4CMDMDODqhVS9e1IR1gME5UwT169AguLi64ceOGrquiFQ8fPoSLiwtu376t66oQ6Q1df851Uf6lS5dQvXp1pKamlluZ+an9XZR/5k123qyQ+KoTVXCzZs1Cz5494ePjAwBYvXo1ZDKZytv9+/c1OvbixYvh4+MDKysrtGjRAidPnixye1VlW1lZKR7Pzs7GxIkT0bhxY9ja2sLDwwODBg3C3bt3Fds4OTlh0KBBCA8P16iuRMbsxc85AIwaNQoBAQGwtLSEn59fgX1u3Lih8nvg+PHjGpUthEBISAiePn2K+vXro2PHjoiOji6y/OnTpxco18TEBNWqVcOsWbPw+PFjjBw5EnXr1oW1tTW8vLwwatQoJCcnK47RoEEDtGzZEl9//bV+fxdx5s0Kj8E4UQWWlpaGFStWYOjQoYp1oaGhuHfvntItODgYQUFBcHFxUfvY69atw7hx4xAeHo7IyEg0bdoUwcHBxQb09vb2SmXHxcUp1TcyMhJTp05FZGQkNm3ahKtXr6JHjx5KxxgyZAh++eUXPH78WO36EhkrVZ9zuXfeeQehoaFF7v/3338rfSYDNMxr/vzzz3HixAlMnz4dJ06cgK2tLYKDg/Hs2bMiy2/YsCGGDh2KmjVrYvXq1Th16hS2bt2KwMBA3L17F3fv3sX8+fNx4cIFrF69Grt27SpwjkOGDMHXX3+t399F7LxJggpITk4WAERycrKuq0JUpjZs2CCcnZ2L3Ob+/fvC3Nxc/PzzzxodOzAwUIwYMUJxPycnR3h4eIg5c+YUus+qVauEg4ODRuWcPHlSABBxcXFK6319fcXy5cs1OhaRMSrucx4eHi6aNm1aYH1sbKwAIM6ePVvisnNzc4Wjo6OwtbVVrEtKShKWlpbit99+K7T88PBwUbduXWFmZiauXLmiVlnr168XFhYWIjs7W7EuMzNTyGQy0bNnT8U6vfouys4WwtpaCECIy5c1Ko+MJ15jyzhRBXbkyJFiW7l+/vln2NjYoG/fvmofNysrC2fOnEHHjh0V60xMTNCxY0dEREQUue/Tp0/h7e0NT09P9OzZExcvXixy++TkZMhkMjg6OiqtDwwMxJEjR9SuM5GxUudzXpQePXrAxcUFbdu2xdatWzXaNzY2FklJSWjatKlinYODA1q0aFHsd8H169chhEDr1q1RqVIleHp64t133y20lTk5ORn29vYwMzNTWi+EUEox0avvoitXgPR0oFIloE6dIo9PxovBOFEFFhcXBw8PjyK3WbFiBQYOHAhra2u1j/vw4UPk5OTA1dVVab2rqyvi4+ML3a9u3bpYuXIltmzZgrVr1yI3NxetW7cutANURkYGJk6ciAEDBsDe3l7pMQ8PD6XLykQVlTqfc1UqVaqEr776Chs2bMD27dvRtm1b9OrVS6OAXP559/LyUlpf3HdBixYtEBQUBFNTU7i4uMDHxwdZWVk4deqUyoaBhw8fYubMmRg+fHiB9QDw5MkTjcovt+8ieYqKvz87b1ZgZsVvQkTGKj09XanF6EURERG4fPky1qxZUy71adWqFVq1aqW437p1a9SvXx9Lly7FzJkzlbbNzs5G//79IYTADz/8UOBY1tbWSEtLK/M6E+m74j7nhXFycsK4ceMU91966SXcvXsX8+bNK5AbXRxLS0uNtu/atSs2b96Mv//+G1u2bIGLiwu8vb3Rs2dPzJw5E1evXkXdunUBACkpKQgJCUGDBg0wffp0lcfLyMjQqPxy+y5ivjhBT1rGNenlrI0ezkQkcXJyQmJiYqGPL1++HH5+fhpf4nZycoKpqSkSEhKU1ickJMDNzU3t45ibm8Pf3x/Xrl1TWi//5xcXF4e9e/cWaIkCgMePH8PZ2VmjehMZo+I+55po0aJFgc9jUeSf95J8F7i7u8PMzAx16tSBo6Mj6tSpowhqb968CUBq8e7SpQvs7OywefNmmJubKx3DyckJMpmswI8BvfkuYjBO0INgvCQjLmijhzMRAf7+/rh06ZLKx54+fYr169erHIGhOBYWFggICMC+ffsU63Jzc7Fv3z6l1qbi5OTk4Pz583B3d1esk//zi46Oxt9//42qVauq3PfChQvw9/fXuO5Exqaoz7mmoqKilD6PxfH19YWdnR3OnTunWJeSkoITJ04U+13Qpk0bPHv2DDExMXj69CliYmJgamoKAPD29kZKSgo6d+4MCwsLbN26VWXrv4WFBczMzJCZmalYpzffRTk5QFSUtMxgvELTeZrK119/jWHDhmHIkCEAgCVLlmD79u1YuXIlJk2apHIfmUxW6C9aBwcH7N27V2ndd999h8DAQNy8ebNA3hpRhfTvv4C3N4KDgzF58mQkJiaicuXKSpusW7cOz549w1tvvVWiIsaNG4ewsDA0b94cgYGBWLBgAVJTUxWfdQAYNGgQqlWrhjlz5gAAZsyYgZYtW6JWrVpISkrCvHnzEBcXh3fffReA9M+vb9++iIyMxLZt25CTk6PI+6xSpQosLCwASD/Kz5w5g9mzZ5eo7kRGITEROHwYwaammHzhAhJ//hmVK1VSPHzt3j08zchAfEQE0h88QNRXXwEAGlSvDgtzc/x04AAszMzg7+sLANh04gRW/v47lv/vf8CmTcWXb24OWYcOGDp0KBYsWIBff/0VjRs3xtSpU+Hh4YHGjRsjKioK8fHxiI6OxqRJk/DGG2+gQYMG+OSTTxASEoJGjRqhb9++sLCwgBAC+/btQ6dOneDm5obOnTsjLS0Na9euRUpKClJSUgAAzs7OiqD9xo0byM7OxtGjR/HTTz/p13fRlStAWhpga8vOmxWdLodyyczMFKampmLz5s1K6wcNGiR69Oihcp9Vq1YJU1NT4eXlJapXry569OghLly4UGQ5e/fuFTKZrNChbzIyMkRycrLiduvWLaMYKodIpX//lYbRatRIiMxMERgYKJYsWVJgs1atWomBAweqPIR8yLMDBw4UWdSiRYuEl5eXsLCwEIGBgeL48eNKjwcFBYmwsDDF/TFjxii2d3V1Fd26dRORkZEFylV1y1+XX3/9VdStW7f454LImHXrJn3WAREIiCXPl+W3oEI+S7HPH18NiPqAsAGE/fNjbHjhGAde2KfArW9fkZubKzw8PISdnZ2wtLQUHTp0EFevXhVBQUGqy4+NFaGhocLd3V2Ym5sLKysrYWZmJpycnMTgwYPFo0ePxIEDBwr9LoiNjVU8BbNnzxbBwcH6+V3088/Sc9SmjTZe7QrJWIY2lAkhRJlH/IW4e/cuqlWrhmPHjildLpowYQIOHTqEEydOFNgnIiIC0dHRaNKkCZKTkzF//nwcPnwYFy9eRPXq1Qtsn5GRgTZt2qBevXr45ZdfVNZj+vTp+Oyzzwqslw+TRGRUli0D5CMOzJ+P7fXqYfz48bhw4QJM1OzNf+DAAbz++uu4fv16gRZ1fdCyZUuMGjUKAwcO1HVViHQjKQlwdgaePQNatcL2pCSMv3EDF/z9YSKTaa2YVQkJmH37Ni75+8P8xe+P48elVIzdu7E9O1vj7xl1FPVdlJWVhdq1a+PXX39FmzZttFamJor8LhozBvj2W2DUKOkvaSwlJQUODg4GH6/pPE1FU9rs4Sw3efJkpR7jKSkp8PT01H7lifTBf//lLU+fjpCrVxE9fDju3Lmj9vt+x44d+OSTT/QyEH/48CFef/11DBgwQNdVIdKd3bulQLxePeDYMYQAiF6wAHf69NHq/7cd/fph9uzZMO/Xr+CDo0cDCxcCo0Yh5Nw5jb9n1Cq/iO+imzdv4pNPPtFZIF7sdxE7b9JzOm0Zz8rKgo2NDf744w/06tVLsT4sLAxJSUnYsmWLWsfp168fzMzM8NtvvynWyQPx69evY//+/YV2rFDFWH5pEanUsyewdStgZib9sx44ECjkqhERGai33wbWrgXGjwe+/FI3dUhKAurWBe7fB774Apg4UTf10Ec5OYCDA5CaCly4ADRsqOsaGSRjidd0OpqKNkZcKE0PZ6IK6epV6e+sWYBMBvz6K3D4sG7rRETa8+wZsGOHtNy9u+7q4eiY90Ng5kygkAlzKqT//pMCcRsb6eoFVWg6H9pw3LhxWLZsGX766SdcvnwZ//vf/5R6OQ8aNAiTJ09WbD9jxgzs2bMH169fR2RkJN566y2VPZxPnz6NX375RdHDOT4+HllZWTo5RyK98ewZEBMjLQ8YALz3nrT84YfSY0Rk+I4fBx4/BipXBlq31m1d3n4baNVKCjw//li3ddEn8hQVPz/g+cgvVHHpPBgPDQ3F/PnzMW3aNPj5+SEqKgq7du1STKN98+ZN3Lt3T7F9YmIihg0bhvr166Nbt25ISUnBsWPH0KBBAwDAnTt3sHXrVty+fRt+fn5wd3dX3I4dO6aTcyTSGzduSEG3tTVQrRrw+edAlSrA+fPA4sW6rh0RacO2bdLfrl2ldDRdMjGRvltMTIB164ADB3RbH33BfHHKR6c54/rKWHKQiArYsQMICQGaNJHGGgeAH3+UWsjt7aVLp89/CBORgWrYELh0SUpB05eOzCNGAN9/DzRoIE1088JMmRVO+/bAkSPA6tVAWJiua2OwjCVe03nLOBGVI/lIKvknmBg6FGjeHEhJYQcrIkN3/boUiJuaAl266Lo2eWbOBJycpLotWqTr2uhWbi5w9qy0zJZxAoNxoopFVTBuagp89520/NNPANO5iAzX9u3S37ZtpZxxfVGlCvB8dktMnw7kSz+tcP77D3j6VEoXZOdNAoNxoopFPpJK3brK61u0kFrIAelyck5O+daLiLTjr7+kv7ocRaUw77wDBAYCT55IQy5WVJGR0t+mTXWf0096gcE4UUWiqmVcbs4caSiyqChg6dLyrBURacOTJ8DBg9Lya6/ptCoqmZhIV+FkMmlug4o6pCo7b9ILGIwTVRSpqXnj/KoKxp2dpbHHAeDTT4EHD8qvbkRUenv3AtnZQK1aqj/j+uCll4DnQxFX2CFVGYzTCxiME1UU165Jf6tWlfI3VXnvPWnc26QkIN/4/kRkAPKnqMhkuq1LUWbPzhtS9fvvdV2b8pWbm5emwmCcnmMwTlRRFJWiImdqmjfe+IoVwMmTZV8vIiq93Ny8zpv6mKKSn5NT3lW4qVOBhATd1qc8XbsmpRNZWUnDPBKBwThRxSHvvFnc5evWrfPGvWVnTiLDcOqUlFpmby+NpKLvhg0DmjWThlSdNEnXtSk/8hQVdt6kfBiME1UU8pbxF0dSUWXuXOmf+unTUgs5Eek3eYpKcDBgYaHbuqgj/5Cqq1cDERE6rU65Yb44qcBgnKiiUCdNRc7VFZgxQ1qePBl49Kjs6kVEpbdtm/RX31NU8mvVChgyRFquKFfhGIyTCgzGiSoCIdRPU5EbMQJo1Ah4/BiYMqXs6kZEpXPrFvDvv1Knza5ddV0bzXzxBeDgIM1I+eOPuq5N2WLnTSoEg3GiiuDRI2mEFEAa9kwdZmZ5nTmXLs1r0SEi/SJvFW/VSuocaUhcXICZM6XlTz8FHj7UbX3KUkyMlCNvacnOm6SEwThRRSBPUfHykqZgVlf79sDAgVLL+ocfSi07RKRfDDFFJb///Q9o0gRITAQ++UTXtSk78lbxJk0Ac3Pd1oX0CoNxoopAnqKiTufNF82bB1SqBBw/Dvz0k3brRUSlk5oK7NsnLXfvrtu6lFT+q3DLl0sjwxgj5otTIRiME1UEmnTefJGHBzB9urQ8caLUekVE+mHfPiAzE/D2Bho21HVtSq5tW+Ctt6SrcCNGGOdVOAbjVAgG40QVQWmCcQAYNQqoX18ax3jaNO3Vi4hKJ3+Kij7PuqmOL78E7OyklnFjG1JVCHbepEIxGCeqCEobjJub540J/P330sgNRKRbQuQF44aaopKfuzvw2WfS8uTJ0khOxuL6dakTvYWFYV/BoDLBYJzI2OXmAtHR0nJJg3EAePVVoH9/6XgffigFAkSkO5GRwL17gK0tEBSk69pox4cfSsHqo0fGNaSqPEWlSRPDmJSJyhWDcSJjd+uWlFNqYSHllZbG/PmAjQ1w9Ciwdq126kdEJSNvFe/cGbCy0m1dtCX/VbglS/JSOwwd88WpCAzGiYydfCSVWrWkKahLw9MTmDpVWh4/Xhozl4h0w5hSVPJ7+WXgjTeMa0hVBuNUBAbjRMautPniLxo7VjpWQkLeKCtEVL7u3gVOn5aWQ0J0W5eyMH++lH4TEQH8/LOua1M6+TtvNmum27qQXmIwTmTstB2MW1oCCxdKywsXAhcuaOe4RKS+HTukv4GBgKurbutSFqpVyxu5acKEvBmEDVFsrDQkrLk50KiRrmtDeojBOJGx03YwDgDBwUDv3kBODjByJDtzEpU3Y01RyW/MGKBePWlI1fBwXdem5OSt4o0bS40ZRC9gME5k7MoiGAeAb74BrK2BgweBdeu0e2wiKlxGBrB3r7T82mu6rUtZsrAAFi2Slr/7Djh3Trf1KSnmi1MxGIwTGbOMDODGDWlZ28G4tzfwySfS8kcfAU+eaPf4RKTagQNAWpqUytG0qa5rU7Y6dgT69pU6cY4YYZhX4RiMUzEYjBMZs5gY6Z+XgwPg4qL943/8MVCzptSZbOZM7R+fiAr66y/pb/fuhj/rpjq++ipvSNVfftF1bTQjBINxKhaDcSJjlj9FpSz+aVtZAd9+Ky1/8w1w5Yr2yyCiPPln3TTmFJX8vLyATz+Vlg1tSNW4OGkmUXNzKWecSAUG40TGrKzyxfMLCZGCgmfP2JmTqKydPy9N5GVtLc2KW1F89JE0V0J8PPDZZ7qujfrkreKNGrHzJhWKwTiRMSuPYBwAFiyQ/tH8/TewcWPZlkVUkclTVDp0kALyiiL/kKrffgtcvKjb+qiLKSqkBgbjRMasvILxGjWAiROl5XHjgNTUsi2PqKKqaCkq+XXtCvTsaVhDqjIYJzUwGCcyZlevSn/LOhgHgEmTAB8f6RL67NllXx5RRXP/PnDihLRsjLNuquObb6S+KgcOAOvX67o2RcvfeZMzb1IRGIwTGavERGmyDKB8gnFrayldBZCmso6OLvsyiSqSHTukAM/fXxrWsCLy9ZV++ANSHvnTp7qtT1Fu3gQePQLMzIAmTXRdG9JjDMaJjJU8GPbwACpVKp8ye/QAunQBsrKAUaMM4zIykaGoyCkq+U2YIAXld+4An3+u69oUTj7zZsOGUms+USEYjBMZq/LKF89PJpM6WVlYALt2AVu3ll/ZRMYsKwvYvVta7t5dt3XRNWvrvCFVv/46Lx1P3zBfnNTEYJzIWOkiGAeA2rWlyYAAYMwYID29fMsnMkaHDkkpGW5uDO4A6epASAiQna2/nTkZjJOaGIwTGStdBeMA8MkngKcncOMGMHduoZs9evQILi4uuHHjRrlVrazLbtmyJTbqaHhHdcvW5fOuK1lZWfDx8cHff/9tmOcuT1EJCQFMNPvX/fDhQ7i4uOD27dtlUDEdWrBAugq3dy+weXOhm+nk/f688+YjAC5TppT7+02Xr7n8s3b69OlyL9tgCSogOTlZABDJycm6rgpRyfn5CQEIsXWrbsrfsEEq39JSiJgYlZuMHTtWvPvuu0rrTp48KV599VXh4OAgHB0dRefOnUVUVJTGxa9fv17UrVtXWFpaikaNGont27cXWfaBAwcEgAK3W7duKbY5dOiQ6N69u3B3dxcAxObNmwuU+9dffwk3N7ciy35RYWXfu3dP47Jr1aolcnJyiixP1fM+cuRI0axZM2FhYSGaNm1aYJ/09HQRFhYmGjVqJExNTUXPnj2LLKMo3333nfD29haWlpYiMDBQnDhxosjtV61aVeC5sbS0VNpm48aNolOnTqJKlSoCgDh79myB4yxatEh4enpqfO5XrlwRL7/8snBxcRGWlpbC19dXfPrppyIrK0uj887NzRVTp04Vbm5uwsrKSnTo0EH8999/Re4THh5e4Nzr1q2rtM3SpUtFUFCQsLOzEwBEYmJigeN89NFH4p133tGovgZhyhTpe8bLS4jUVJWblOT9rup5ByBsbGzUq9fNm0IAYgwg/Js2VXrN3377bY3LrlSpkoiNjVVso+5r3rJlS5191l599VV1nqlSMZZ4jS3jRMZIiLyW8bp1dVOHPn2Ajh2BzEwpXeUFaWlpWLFiBYYOHapY9/TpU3Tp0gVeXl44ceIEjh49Cjs7OwQHByM7O1vtoo8dO4YBAwZg6NChOHv2LHr16oVevXrhwoULhZZ97do1AMDIkSNx7NgxbNy4EbVq1cI333yj2CY1NRVNmzbF4sWLCy3bwcEB8fHxaN26tcqyi3L16lXcu3dPcXNxcdGo7K5du+LJkyfYuXNnoduoOne5d955B6GhoSr3y8nJgbW1NUaNGoWOHTsWey6FWbduHcaNG4fw8HBERkaiadOmCA4Oxv3794vcz97eXum5iYuLU3o8NTUVbdu2xdwirsT07t0bt27dwiuvvFLgsaLO3dzcHIMGDcKePXtw9epVLFiwAMuWLUN4eLgaZ5znyy+/xMKFC7FkyRKcOHECtra2CA4ORkZGRpH7NaxVC/cA3LOwwL1r13D06FGlx9PS0tClSxd88sknhR5jyJAh+OWXX/D48WON6qz3Jk8GvLykkUtUDKla0vf7xx9/rPR+u3fvHho0aIB+/fqpV68zZ5AG4AeZDP9du6b0mm/ZsgVvv/12oWUnJiZCJpNh5MiRiIiIwO7du9G4cWO8/vrrSudV3Gvu5uaG48eP46OPPir3z9qbb76Jo0eP4qKhTM6ka7r+NaCPjOWXFlVgt29LrUWmpkJo2HqnVZcuCWFmJtVl2zalhzZs2CCcnZ2V1p06dUoAEDdv3lSsO3funAAgoqOj1S62f//+IiQkRGldixYtxHvvvVdo2QMHDizQwrR161ZhZWUlUlJSCpSBQlqn+/fvL6pXry7eeustlWWrIm8ZV9W6pUphZQshxJAhQ5TKfpGqc88vPDxcZWtdfmFhYSVuGQ8MDBQjRoxQ3M/JyREeHh5izpw5he6zatUq4eDgoNbxY2NjC22t27BhgzA3NxdTpkxRua865y43duxY0bZtW7W2FUJqFXdzcxPz5s1TrEtKShKWlpbit99+K3S/8PBw0dTdXfoMdelSZBnFvY98fX3F8uXL1a6zwdi4UXp+LCyEeOFKgzbe70IIERUVJQCIw4cPq1enKVPEekCYAIW+5oWV3a9fPwFA6QrX1q1bhUwmK3A1pqjXPDAwUNjZ2Sle8/L8rAkhxCuvvFLoZ01bjCVeY8s4kTGSt4rXqAGYm+uuHvXrA2PHSsujRwP5WgCPHDmCgBc6NtWtWxdVq1bFihUrkJWVhfT0dKxYsQL169eHj4+P2sVGREQUaL0NDg5GREREoWXLW979/Pzg7u6OTp06ISYmBhkZGTgj74ilZtktW7bEkSNHVJZdlPxl//PPP2qXmV9gYKBS2S9Sde7lJSsrC2fOnFF6bUxMTNCxY8din5+nT5/C29sbnp6e6NmzZ4la3I4cOYLq1asX+fyo49q1a9i1axeCgoLU3ic2Nhbx8fFK5+7g4IAWLVoUe+7RCQnwAFDj1Cm8+eabuHnzZonqXdx7w2D17g107iyNODN6tFJnTm2935cvX446deqgXbt26u1w5gy2A8gFNH7N3d3dAQBVqlSBr68v+vXrh6VLl6Jjx44wV/P7XP5Za9KkieI1L8/PGmDE77cywGCcyBjpsvPmi6ZOlcY6j4mRJgN6Li4uDh4eHkqb2tnZ4eDBg1i7di2sra1RqVIl7Nq1Czt37oSZmZnaRcbHx8PV1VVpnaurK+Lj4wstOzg4GDKZDMOGDcP69etRpUoVjH3+Q+LevXsale3t7Y1bt24hNze3QNmquLu7Y8mSJdi4cSM2btwIT09PvPzyy4iUj1OsAQ8PD6WyX6Tq3MvLw4cPkZOTU+Rro0rdunWxcuVKbNmyBWvXrkVubi5at26tcee0uLg4uLi4FLjsrq7WrVvDysoKtWvXRrt27TBjxgy195Wfn6bn3qJ+fawWArsA/PD114iNjUW7du3w5MkTjevv4eFR4nPXazIZsGiR1PCwcyfw11+Kh7Txfs/IyMAvv/yiMtVFpeedN68/v6vpa96lSxdMnz4dpqamuHnzJv744w/s3bsXK1asULvO8s9a9erVlV7z8vqsAUb8fisDOg/GFy9eDB8fH1hZWaFFixY4efJkoduuXr0aMplM6Wb1wkD6mzZtQufOnVG1alXIZDJERUWV8RkQ6SH5uLv6EIzb2QFffSUtz54NPP9yTk9PL/D5TU9Px9ChQ9GmTRscP34c//zzDxo1aoSQkBCka3GIRFVlDx06FPPnz8eXX36JV155Bdu2bVO0xptoOHqFhYUFcnNzkZmZqdb2devWxXvvvYeAgAC0bt0aK1euROvWrZXy1dVlbW1dZNmqzl3ftWrVCoMGDYKfnx+CgoKwadMmODs7Y+nSpRodJz09HdbW1khLSytRPdatW4fIyEj8+uuv2L59O+bn+3FZVro+e4Z+QqBJ48YIHjQIO3bsQFJSEtaXYCr40py73qtTR5qRE5Bax59/X2jj/b5582Y8efIEYWFh6u1w5w5w/z7U+/QX5O/vrwj+T58+jW3btiEnJwfBwcEQGg7haGlpqdFrrq3PGmDk7zct02kwXpKOPNroWEBk9HTdefNFoaFAUJD0D3LcOACAk5MTEhMTlTb79ddfcePGDaxatQovvfQSWrZsiV9//RWxsbHYsmWL2sW5ubkhISFBaV1CQgLc3NwKLRsAxo0bh6SkJNy8eRMPHz5UdPSrUaOGRmXfuXMHtra2sLa2LlC2ugIDAxWdSjXx+PFjpbJfVNi5lwcnJyeYmpoW+dqow9zcHP7+/ho/P/Jzd3Z21mg/OU9PTzRo0AADBgzAF198genTpyMnJ0etfeXnp/G5y4c0fD7Rj6OjI+rUqVPi90ZJz90gfPopUL26NKTql18C0M77ffny5ejevXuBFu5CPb+i5WZnB0Dz13zx4sVwcHDAl19+CX9/f4SEhKBhw4a4fPkyTpw4oVYV8n/W8r/m5fVZAyrA+02LdBqMf/311xg2bBiGDBmCBg0aYMmSJbCxscHKlSsL3Ucmk8HNzU1xe/HD8fbbb2PatGml6u1PZPD0KU0FkC4jf/cdYGoKbNoE7NkDf39/XLp0SWmztLQ0mJiYQCaTKdbJ7xeWdqFKq1atsG/fPqV1e/fuRatWrQBAZdl5VZXBw8MD1tbWOHjwIKytrdGsWTONyo6IiIC/v7/KstUVFRWlyB3VxIULF5TKflFR517WLCwsEBAQoPTa5ObmYt++fRo9Pzk5OTh//rzGz4+/vz9u3rxZ5POjrtzcXGRnZ6v9vvT19YWbm5vSuaekpODEiROFn3t2tpR2AUiT3EDK542JiSmT94bBq1Qp7yrcF18AsbGlfr/HxsbiwIED6qeoAIrJftrWqQMzMzPNXnPkfQ/KPX36VNHwqO77Tf5ZO3funOI1L8/PGlAB3m9apH4SppbJOxdMnjxZsU6dzgXyjgW5ublo1qwZZs+ejYYNG5aqLpmZmUqXdFNSUkp1PCKdys4Grj/PVtSXYBwAGjUCRo0CvvkGCA1FsLMzJkdHI7FhQ1Q2NQUAdMrIwPiEBIxwcsLIqlWRC+CLBw9glp6OV2bOlP7BqmF0aiqCrl/HV+7uCLGzw+/JyTj94AF+fPgQaN0awePHY+L58wgNDcW6desAAAsWLEBUVBT69euH7OxszJ07F7Gxsfjss89g+rx+T58+VWohio2NRVRUFKpUqQIvLy+p7NGj0bZtW9SoUQNXrlzB77//jtOnT+PHH39U7Dd58mTcuXMHP//8s6JsX19fNGzYEBkZGVi+fDn279+PPXv2KPZRp2xA6rDWuXNn5SdECOmKxLNnCB42DJMnT0ZiYiIqV66s2OTatWt4+vQp4uPjkZ6erkjxa9CgASwsLAAAly5dQlZWFh4/fownT54otvHz81PrdQGkqw9hYWFo3rw5AgMDsWDBAqSmpmLIkCGKbQYNGoRq1aphzpw5AIAZM2agZcuWqFWrFpKSkjBv3jzExcXh3XffVezz+PFj3Lx5E3fv3gUgDRMJAG4A3CZNAt57D8HBwRg/fjzatGmjVKfizv2XX36Bubk5GjduDEtLS5w+fRqTJ09GaGio2h3qZDIZxowZg88//xy1a9eGr68vpk6dCg8PD/Tq1UuxXYcOHdC7d298+OGHwD//4OPkZLzm4ABvFxfcPXYM4eHhMDU1xYABAxT7xMfHIz4+XvH+OH/+POzs7ODl5YUqVaoAkAK8M2fOYLaK4f+MSr9+wNKlwP790mfdzq7A9wwAXMvMxNPcXMQ/foz0p08RVbs2AKCBpSUs8gXCK+Pj4W5qiq6TJ0uTmanj1i0AQJdOnTDp7FnMmDFD6TV3dnaGr68vDh48iPT0dAQGBuLVV1/FjBkzYGFhgVu3buHUqVMYN24cWrRoga+//hppaWnw9PRUBLfqvOYjRoxAWFgYcnJycPny5bL/rD1vJJU7cuQIZs6cqd5zVtHpahiXO3fuCADi2LFjSuvHjx8vAgMDVe5z7Ngx8dNPP4mzZ8+KgwcPiu7duwt7e3ulSTnkihtyJ7/CBvc39KFyqIK6elUa5svGRojcXF3XRllSkhDVqkn1A0QgIJY8X5bf9gCiDSAcAFEZEK8CIuKFbQCIVS+se/G2HhB1AGEBiIaA2J7/8ZYthZOTk6hdu7aianPnzhVWVlaKz7+dnV2BIcAKm5wnLCxMsc3t27eFqampqFGjhrCwsBANGzYsMOlPWFiYCAoKUiq7Zs2awsrKSlSpUkW8/PLLYv/+/SUq29zcvOB34tq1eed++rQIDAwUS5YsUdokKChI5fHzTzTi7e2tchs5+ffugQMHingTSBOCeHl5CQsLCxEYGCiOHz9eoC75z2vMmDGK7V1dXUW3bt1EZGSk0j6qJisBIMLbtpXO295eHPvrL2FqaioWLlyo0bn//vvvolmzZqJSpUrC1tZWNGjQQMyePVukp6cXeH3yP18vkk/64+rqKiwtLUWHDh3E1atXlbbx9vYW4eHh0p2PPhKhgHC3thYWFhaiWrVqIjQ0VFy7dk1pn8L+h61atUqxza+//lpgsiCjdfGiNNlYEd8zQSqeLwAiNt82OYCoDohPCvmOOaBiH8VNJhPi/HkRGBgounXrpvSaBwYGFvl+Cw0NFY6OjkImkwmZTKbY7/Lly4pTHD16tFqvuYuLS/l91uTvWyHFa46OjiItLU1rL6sqxjK0oUwIDXsDaMndu3dRrVo1HDt2TOmSyYQJE3Do0CG18qKys7NRv359DBgwoMCvrxs3bsDX1xdnz54tttVGVcu4p6cnkpOTYW9vr9mJEenatm3SJW0/P+DsWV3XpqCEBOD8eQDA9hMnMP7HH3Fh2TK1O0nG3ruHOkOG4NLy5ahdvbpmZWdkAAMGAE+fYvvo0Ri/Zw8uXLigftmxsahTpw4uXbqE2s9b0l40ceJEJCYmKrWElxeVZaekSH0H5CMoTJ+O7c2bY/z48RqduzoOHDiA119/HdevX1dqddeppk2Bc+cAAKHe3rBs3x6nT5/W+rmvWrUKs2fPxqVLl9RuLS9W3bpSytmGDUDfvqU6VMuWLTFq1CgMHDhQO3XTdzExQGwsgJJ9z6hj1a5dmP3bb7i0YgXMXxztqXp1oF49bN++XWefNV2+5qGhoWjatGmRkxJpQ0pKChwcHAw+XtNZmoo2OvKUpmNBfpaWlrC0tCzVMYj0hj6NpKKKq6t0AxDSsSOibW1xp359eHp6qrX7jsWLMfy991B78OCSlT9tGjBhAkJ+/RXRY8fizp076pe9YweGDx9eaCAOAC4uLhj3vJNqeVNZ9owZUiBuagrk5ADbtiEkPBzR0dEanbs6duzYgU8++UR/AvGbN6VAXCZDlhBoHBeHjwYPxtJmzcrk3GfPnq29QPy//6SbmZk0hnYpPHz4EK+//rpSaovRq1lTuqFk3zPq2LF0KWYvWADzLl0K3SYkJEQnnzVdvuZZWVlo3LixYmhYUoMum+UDAwPFhx9+qLifk5MjqlWrVuTsUPk9e/ZM1K1bV4wdO7bAY5qkqbzIWC57UAU1fLh0mXTqVF3XRD9lZgpRr570HI0cqevalK2LF/NmQF21Ku8S+p07uq5Z+Vi8WDrftm2FGDpUWvbzE+LZM13XrHhffy3Vt0MHXdeESG8ZS7ym09FUxo0bh2XLluGnn37C5cuX8b///U+pc8GgQYOUOnjOmDEDe/bswfXr1xEZGYm33npLZceCqKgoRe/pq1evIioqqshB7omMir6NpKJvLCykCUIAYPFi4N9/dVufsiIE8OGHwLNnQM+ewODBQGCg9NiOHTqtWrmRDwv42mvAnDmAoyMQFQUsWaLLWqlHPnHN81FUiMh46TQYDw0Nxfz58zFt2jT4+fkhKioKu3btUgxXePPmTaWZ7xITEzFs2DDUr18f3bp1Q0pKCo4dO4YGDRoottm6datiXE4AeOONN+Dv748lhvDlS6QNDMaL17GjlIObmysFrLrpOlO2NmwADhwArKykEWwAxVjViiDVmKWmSiNqANJ5OzsDs2ZJ96dMAR480F3dipOUBMinEZe/ZkRktHTWgVOfGUuHAKqAnj6VZrwEgMePAX3J3dVHN28C9esDaWnAmjXAW2/pukba8/QpUK+eNBPg9OlAeLi0/uxZoFkzwMYGePRICtSN1ZYtQK9egK+v1JlPJpNy5ps3l1rHhw4Fli/XdS1VW79emiirXj3g8mVd14ZIbxlLvKbTlnEi0rLoaOmvszMD8eJ4eUkz9gHA+PHSqCPG4vPPpUDc1xeYMCFvvZ8fUK2a9APkwAGdVa9c5E9RkU8iZWoqpSYBwIoVgJqzGZY7pqgQVSgMxomMib6PpKJvPvoIqF1bGm3ks890XRvtuHoV+PprafnbbwFr67zHZLKKkaqSmwts3y4tv5jm0bo1EBYmLY8YIbWW65OcnLycfqaoEFUIDMaJjIk8X7xuXd3Ww1BYWgILF0rL334LXLyo2/qUlhDSLKfZ2UC3bqqDOfm6v/4yzlx5AIiMBO7dk6ZHb9++4ONz5wL29tK05StWlH/9inL8eF6KWevWuq4NEZUDBuNExoSdNzXXpYs02khOjuF35ty8GdizRxox5ttv89Iz8uvQQWotv3VLMfmS0ZG3+gcHSz+4XuTqKo2/DgCTJ0v58/pCnqLStas0xjgRGT0G40TGhMF4ySxYIHVmPHhQ6jxniNLSAPkkGxMmALVqqd7O2loKyAHjTVWRn1dRaR4jRgCNG0ut0PK+A/pAnboTkVFhME5kLIRgMF5SPj5SCykg5ZE/farT6pTInDnSCDFeXnnnUpj8qSrG5u5dKf1EJpNSdQpjZgZ89520/OOP0j66FhsrpUqZmkpXbIioQmAwTmQsHjwAkpOlIOT5NNCkgfHjpdFH7twBZs7UdW00c+0a8OWX0vI330hDFxZFHoyfOAHcv1+2dStv8o6bLVoALi5Fb9u+PTBwoPRDdsQIqeOnLslbxdu25WhIRBUIg3EiYyEfScXb27jHjy4r1tZSnjUgjUZy5Ypu66MuIYDRo4GsLKBzZ6B37+L3qVYN8PeX9t25s+zrWJ40TfOYN0/q6HniBLB6dZlVSy1MUSGqkBiMExkLjqRSeq+9BoSESFPIjxxpGJ05t22ThsIzN5dGhlHVaVMVY0xVSU8H9u6VltUNaD08pImRAGDSJCAxsUyqVqwnT6Q+CwDHFyeqYBiMExkL5otrx7ffSqOR/P03sGmTrmtTtPR0qVUcAMaN0+yHmDzg271balU3BgcOSM+JpyfQpIn6+40aJc3G+uABMG1a2dWvKHv3Sq9DrVr8DBNVMAzGiYwFg3HtqFkzb9bKsWOB1FTd1qcoX34pdfqrVg2YMkWzfQMCADc3qbPq4cNlU7/ylj/NQ90rBIB0VUHemfP774GoKK1XrVglrTsRGTwG40TGgsG49kyeLOXe37oljVKij2JjgS++kJa/+krKe9aEiYmUkgMYR6qKEKXLuX71VaB/f6kTZ3mPN59/xlCmqBBVOAzGiYxBTo40ogbAYFwbbGykUUkAqYNfdLRu66PK2LFARkZeEFkSxjQb57lz0o8nGxvpOSmJr76S9v/nH2DtWu3WryinTkmj2tjbSyOpEFGFwmCcyBjExUn5ppaWUr4slV6vXtLoJFlZUl62PgWrO3cCW7ZIY2UvWlTytIaOHaX8+NhYwxk9pjDyVvGOHUs+mlD16sDUqdLy+PHSUKHlIf+MoRYW5VMmEekNBuNExkCeolK7tjRhCJWeTCYFuubmUvCrL6kcmZlSh0NA+pHQoEHJj1WpUl4rsr6cX0nJ61/aYQHHjZOuLiUk5I2yUtbkwThTVIgqJAbjRMaA+eJlo04daUZOQAp809N1Wx9ASqW4dk3qfKmNkT/kwas8IDRECQnAyZPSsjwPvqQsLKQfYYD098KF0h2vOLduSR1GZTKga9eyLYuI9BKDcSJjwGC87EyZIqUv3LgBzJ2r27rcvAl8/rm0PH++lGNcWvJg/J9/gMePS388XdixQ0ojCgiQxg0vLfnkSTk5Zd+ZU95xs1UrwMmp7MohIr3FYJzIGDAYLzu2tlJrNCCNXnL9uu7q8tFHUut8u3bSNO7a4O0NNG4sjehhqLNxlsXMld98I83KeugQ8Pvv2jvui5iiQlThMRgnMgZXr0p/GYyXjX79pNzqzExpFBNd+Ptv4I8/pD4B332n3bGoDTlVJTMT2LNHWtZmQOvtDXzyibT88cfSDJnalpYG7NsnLWvzhwQRGRQG40SGLj1dSl8ANJuBkdQn78xpZgZs3SqlRZSnrCwpXQIARozQbHZJdcgDwV27gOxs7R67rB06JE1c5O4O+Ptr99gffyxNAnX3LjBzpnaPDUiBeEYG4OMDNGyo/eMTkUFgME5k6OTji1euDFStqtu6GLMGDfKmnh81Sgqiysu330pXP1xcgM8+0/7xW7SQ8pWTkqTccUMib80PCZEmMtImKyvpuQektJXLl7V7fM66SURgME5k+PLni/MfetkKD5daYGNi8vLIy9qdO3kB+Ny5gKOj9sswNQW6dZOWDSlVJf+sm2WVcx0SIh372TNg5EjtdeYs7YyhRGQ0GIwTGTp23iw/dnbSKCYAMGuWNNlSWfv4YyA1VRptY9CgsivHEPPGL12SJiyytAQ6dCi7chYskMrYtw/YuFE7xzx7Vkp/sbUFXn5ZO8ckIoPEYJzI0DEYL18DBgDt20u5+vIxyMvKwYPSSB4yGbB4sfbTMPILDpZy4q9eBaKjy64cbZL/cHj1VSmoLSs1agATJ0rL48ZJP45KS173zp2lQJ+IKiwG40SGjiOplC+ZTBrNxNRUaiXdu7dsysnOzuu0+f772u+c+CJ7eyAoSFo2lNbx8hwWcNIkqaPlrVvSVZHS0taMoURk8LQSjKekpODPP//EZW13biGi4slbxjmSSvlp3DgvUB45UhrtRNu++w64eFHqlCuf6KesGVKqyqNHwLFj0nJpZ91Uh7W1lK4CSKlK8s9dSdy7B5w+LS2XR92JSK+VKBjv378/vvvuOwBAeno6mjdvjv79+6NJkybYqK18OiIq3qNH0g0AatXSbV0qms8+k0Y3uXpVGmlDm+7dkzqLAtJEQ1WqaPf4hZG3MB8+DCQnl0+ZJbVzpzRRUZMmgJdX+ZTZowfQpYt01WL06JJ35pQPjRkYCLi6aq9+RGSQShSMHz58GO3atQMAbN68GUIIJCUlYeHChfi8vFpwiCgvt7d69bLNmaWCHByAL7+UlmfOBG7f1t6xJ06UJpl56SXgnXe0d9zi1KwJ1KsnjRyye3f5lVsSupi5UiYDFi4ELCykMdm3bCnZcZiiQkT5lCgYT05ORpXnLTW7du1Cnz59YGNjg5CQEEQbSscfImPAzpu69fbbQOvWUoe+jz/WzjGPHgXWrCmfTpuqGEKqSna2FAwD5R/Q1q6d91qPGSN15NVERkZeP4Py/CFBRHqrRN/ynp6eiIiIQGpqKnbt2oXOnTsDABITE2FlZaXVChJREdh5U7dMTPIC5nXrgAMHSne8Z8+kGTYB4N13pZbx8iYPEHfsAHJyyr98dRw9KqXRODvr5jn65BPA01Ma2vKLLzTb9+BBIC0NqFYNaNq0TKpHRIalRMH4mDFj8Oabb6J69epwd3fHy8/HSD18+DAaN26szfoRUVHYMq57fn7SaCeA1KmzNNPJL1kCnDsnzaY6e7ZWqqex1q2liYUePQKOH9dNHYqTf9ZNU9PyL9/WFvj6a2l57lxpEih15U9R4SRdRIQSBuMffPABIiIisHLlSvzzzz8weX4ZtUaNGswZJypPHElFP3z+uTSd/KVLwKJFJTvG/fvAlCnS8qxZ0vF0wcwM6NpVWtbXVBV9yLnu0wfo2BHIzJTSVdRRHjOGEpHBkQlR8rl9s7KyEBsbi5o1a8LMzEyb9dKplJQUODg4IDk5Gfb29rquDpFqublApUpSzmp0NEdT0bUVK6TUEjs7KX3I3V2z/d95B1i1CmjWDDh5UjctvnK//QYMHAg0bAhcuKC7eqjy33/Sj09zc+DhQ2l8dF25ckUa5vLZM+kHQnE/Ds6fl0Z/sbaWrjxYW5dPPYmMlLHEayVqGU9LS8PQoUNhY2ODhg0b4ubNmwCAkSNH4gtN8+eIqGTu3JECcTMzaTIS0q0hQ6Sh6p48ASZM0Gzf48elQBzIm1BIl7p0kepw8aI03bw+kbcsv/yybgNxQBp5ZuxYaXn0aKlzZlHkLfodOjAQJyKFEgXjkydPxr///ouDBw8qddjs2LEj1q1bp7XKEVER5CkqNWtKATnplrwzp0wGrF0LHDmi3n45OXmdNgcPBlq1KrMqqq1yZaBtW2l5+3bd1uVF+pCikt/UqYCHB3D9OjBvXtHbMkWFiFQoUTD+559/4rvvvkPbtm0hy9cBpWHDhojRpCMLkZ549OgRXFxccOPGDV1XRS0tW7bExt9/l+6w86b+aN4cGDZMWh4xQkpfKITiPffFF0BkpDRu+dy55VRRNciDXXnwW4ysrCz4+PjgtHxmybKQlJT3I0dfgnE7O+Crr6Tl2bOBwr5D7t/Ho4gIuAC40aRJedWuTJXLa05UAZQoGH/w4AFcXFwKrE9NTVUKzokMxaxZs9CzZ0/45Ev3kMlkBW6/ywNgDSxevBg+Pj6wsrJCixYtcPLkySK3X716dYFyXxwydMqUKZi0YQNyAQbj+mb2bGnGzPPngR9+KHSzWbNmoWdwMHzko3LMnIlRn3+OgIAAWFpaws/PT+V+586dQ7t27WBlZQVPT098KZ94SANCCEybNg3u7u6wtrZGx44dC84RIQ92Dx4EnjzB9OnTC7wv69Wrp9jcwsICH3/8MSZOnKhxfdS2e7d0JaFBA6BGjbIrR1OhoVLaTEYGMG6c6m127sQsAD2rVoVPy5aK1aNGjSr2NZe7du0a7Ozs4OjoqHEV1XrNX6AXrzlRBVCiYLx58+bYnu/SpTwAX758OVrpwyVWIg2kpaVhxYoVGDp0aIHHVq1ahXv37iluvXr10ujY69atw7hx4xAeHo7IyEg0bdoUwcHBuH//fpH72dvbK5UbFxen9HjXrl3xJD0dOwGOpKJvqlaVRkMBpBSGhIQCmyjec0+eAI8fS536/vc/AMA777yD0NBQlYdOSUlB586d4e3tjTNnzmDevHmYPn06fvzxR42q+OWXX2LhwoVYsmQJTpw4AVtbWwQHByMjf85z3bpSp+CsLODvvwFIVz/zvy+PHj2qdNw333wTR48excWLFzWqj9r0LUVFTiaTRtExNQU2b1Y5e2nan39iBYChPXsWeKyo11wuOzsbAwYMUMx+rSm1XnMVdP6aE1UEogSOHDkiKlWqJN5//31hZWUlRo8eLTp16iRsbW3F6dOnS3JIvZKcnCwAiOTkZF1XhcrBhg0bhLOzc4H1AMTmzZtLdezAwEAxYsQIxf2cnBzh4eEh5syZU+g+q1atEg4ODsUee4idnXgLEOLgwVLVkcrAs2dCNGsmBCDE4MEFHt6wYYNwrlxZCJlM2ubwYaXHw8PDRdOmTQvs9/3334vKlSuLzMxMxbqJEyeKunXrql213Nxc4ebmJubNm6dYl5SUJCwtLcVvv/2mvPGYMVL9hgwptE4veuWVV8SUKVPUro/asrOFqFJFqs+RI9o/vjaMHSvVr3ZtITIy8tZnZooNVlbCGRDi5EmVuxb3/E6YMEG89dZban8/5KfRa65BneTK7DUnKoaxxGslahlv27Yt/v33Xzx79gyNGzfGnj174OLigoiICAQEBGj1xwJRWTty5Eih79sRI0bAyckJgYGBWLlyJYQGI4FmZWXhzJkz6Nixo2KdiYkJOnbsiIiIiCL3ffr0Kby9veHp6YmePXsWbHXKykLg06c4AjBNRR+ZmkqdOQFg9Wrghdf7yOHDCMjNlcadfustQM3WzoiICLRv3x4WFhaKdcHBwbh69SoSExPVOkZsbCzi4+OV3pcODg5o0aJFwfelvAV6+3ZACERHR8PDwwM1atTAm2++qRhJK7/AwEAcUbfzqiYiIqSrCFWqAPnSPPTK9OmAq6s01Og33+StP3wYRzIyEGBhAZTgf+T+/fuxYcMGLJa/pzSk0Wv+Ap2+5kQVhMbBeHZ2Nt555x3IZDIsW7YMJ0+exKVLl7B27VrOvkkGKS4uDh4eHgXWz5gxA+vXr8fevXvRp08ffPDBB1ikwYQuDx8+RE5ODlxdXZXWu7q6Ij4+vtD96tati5UrV2LLli1Yu3YtcnNz0bp1a9y+fTtvo+vX4SEEbgHIVdF/g/RAy5bScIeANDNnvqnl444cgUdystT5T4Oc7/j4eJXvJ/lj6h4j/375j1PgGO3aScMH3r+PFpUrY/Xq1di1axd++OEHxMbGol27dnjy5InSLh4eHgXSqrRCPhJJ1676O3qQvX3eiCozZwK3bknL27YhDoCHj4806o4GHj16hMGDB2P16tUlHkdZo9c8nxYtWuj2NSeqIDQOxs3NzbFx48ayqAuRTqSnpxfoIAkAU6dORZs2beDv74+JEydiwoQJmFfc0GVa0KpVKwwaNAh+fn4ICgrCpk2b4OzsjKVLl+ZtdPUqrAHkAsjMyirzOlEJffGFNLV8ZCQgz+t+/BjpFy/CCpBaUjWdHKg8WVgAwcEAgK6PHqFfv35o0qQJgoODsWPHDiQlJWH9+vVKu1hbWyMtLU37dTGUYQHfeksaFjItDfjoI+nqx19/IR2AVQk6nQ4bNgwDBw5E+/bttV/XYnTt2lW3rzlRBVGiNJVevXrhzz//1FolNBltQp2RJkQJeo1TxeXk5KTWJf4WLVrg9u3byMzMVPu4pqamSHihA19CQgLc3NzUrp+5uTn8/f1x7dq1vJX//YfHAGzNzGDNyUP0l4uL1EIKAJ9+Ks0YOXUqnLKzkejgAIwcqdHh3NzcVL6f5I+pe4z8++U/jspjyFNV5MHwc46OjqhTp47y+xLA48eP4ezsrFZd1Hb9OnDpkpT+8/zHgd6SyaSJm0xMgA0bpHSl69fhZGKCRDs7jQ+3f/9+zJ8/H2ZmZjAzM8PQoUORnJwMMzMzrFy5Uq1jaPyaF6JcX3OiCqREwXjt2rUxY8YM9O3bF3PmzMHChQuVbpooyWgTxY00UdJe41Qx+fv749KlS8VuFxUVhcqVK8PS0lKt41pYWCAgIAD79u1TrMvNzcW+ffs0GnUoJycH58+fh3v+FtT//sMFAP4q0mtIz7z/PtC0KZCYCLzxBrBkCfwBXHJykqZ010CrVq1w+PBhZGdnK9bt3bsXdevWReXKldU6hq+vL9zc3JTelykpKThx4oTq92W3blKAGRUF5EuVevr0KWJiYpTflwAuXLgAf39/jc6rWPIfAu3aSVca9F3TpnkTOY0aBQDwr10bl+QTdWkgIiICUVFRituMGTNgZ2eHqKgo9O7dW61jaPyaF6JcX3OiiqQkvT59fHwKvfn6+mp0LE1HmyiuJ3lJe43nZyy9c6kYCQlCXLkizp07J8zMzMTjx48VD23dulUsW7ZMnD9/XkRHR4vvv/9e2NjYiGnTpmlUxO+//y4sLS3F6tWrxaVLl8Tw4cOFo6OjiI+PV2zz9ttvi0mTJinuf/bZZ2L37t0iJiZGnDlzRrzxxhvCyspKXLx4Me/A7duLIEDM6Nu35OdP5efIEWmUjee3c8HBBd5zQggRHR0tzp49K9577z1Rp04dcfbsWXH27FnF6ClJSUnC1dVVvP322+LChQvi999/FzY2NmLp0qUaVeeLL74Qjo6OYsuWLeLcuXOiZ8+ewtfXV6Snpyu2efXVV8WiRYukO61bi48AcXDsWBEbGyv++ecf0bFjR+Hk5CTu37+vdGxvb2/x888/l+BJKkKnTtJz99VX2j1uWUpMFMLZOe81nzy5RK/5i0oymooQJXjNhRAfffSROHjwoG5ecyI1GEu8VqJgXFsyMzOFqalpgeHjBg0aJHr06KFyn1WrVglTU1Ph5eUlqlevLnr06CEuXLigeDwmJkYAEGfPnlXar3379mLUqFEqj5mRkSGSk5MVt1u3bhnFi0vFCAgQwsJCiKtXRWBgoFiyZInioZ07dwo/Pz9RqVIlYWtrK5o2bSqWLFkicnJyFNvExsYKAOLAgQNFFrNo0SLh5eUlLCwsRGBgoDh+/LjS40FBQSIsLExxf8yYMYrtXV1dRbdu3URkZKTSPrednYU5IG5t21by86fy9fbbUmBmayvErVsF3nNCSO8FAAVusbGxim3+/fdf0bZtW2FpaSmqVasmvvjiC6VjHDhwoMA+L8rNzRVTp04Vrq6uwtLSUnTo0EFcvXpVaRtvb28RHh4u3Zk9W4QCwt3SUlhYWIhq1aqJ0NBQce3aNaV9jh07JhwdHUVaWprGT0+hkpOFMDeXnrsX6qj3Vq7M+xF240aJX/P8VAXjZfKaCyFCQ0OFu7t7+b/mRGpiMP5cbm6uyM3NLdG+d+7cEQDEsWPHlNaPHz9eBAYGqtzn2LFj4qeffhJnz54VBw8eFN27dxf29vbi1q1bQggh/vnnHwFA3L17V2m/fv36if79+6s8Znh4uMovQ0N/cakIDx/m/ZOcM0ds27ZN1K9fXynYLs7+/fuFo6NjgZauMpecLCYAYhggRFJS+ZZNJXf/vhBvvCHEhg1CCFGi95w6Vq5cKWrVqiWysrK0d9Dz56XPipWVEKmphW7Wv39/MWvWLO2VK4QQf/yRN3a3ocnJEWLCBCGePycG9ZqrqUxecyI1GUswXqKccQD4+eef0bhxY1hbW8Pa2hpNmjTBmjVrSno4tak10oSGJk+ejOTkZMXtlnw4KjJekZF5y9u2ISQkBMOHD8edO3fUPsSOHTvwySefqJ2rqzX//QcXADOdnAAHh/Itm0rO2Rn47Tegb18AKNF7Th07duzA7NmzYa5hPnqRGjYEvL2l6d7z5R3nl5WVhcaNG2Ps2LHaKxcwnFFUVDExAebOBT75BICBveZqKLPXnKiCKdFgrV9//TWmTp2KDz/8EG3atAEAHD16FO+//z4ePnyo9gdTG6NNvDjSRP5e4/k7mSQkJMDPz0/lMSwtLdXulEdG4syZvOWICODhQ4wZM0ajQ5THMIcq/fcfPgKABg10Uz5pjabvOXVs2LBB68eETCaNqrJ4sRQcqwiMLSwsMGXKFO2Wm5MjTTgE5I3qYuAM5jVXQ5m85kQVUIlaxhctWoQffvgBc+fORY8ePdCjRw98+eWX+P777zUaTUUbo028ONKEtnqNk5HLH4zn5gI7d+quLpqSj8jAmTepPMkD8G3bpASv8nDqFPDggXQFqG3b8imTiKiclSgYv3fvHlq3bl1gfevWrXHv3j2NjjVu3DgsW7YMP/30Ey5fvoz//e9/SE1NxZDnM9cNGjQIkydPVmw/Y8YM7NmzB9evX0dkZCTeeustxMXF4d133wUAyGQyjBkzBp9//jm2bt2K8+fPY9CgQfDw8ECvXr1KcrpkjORpKvJptV8YQ1mvMRgnXQgKAmxtgbt3gbNny6dM+eeySxeNh4EkIjIUJUpTqVWrFtavX49PnufBya1btw61a9fW6FihoaF48OABpk2bhvj4ePj5+WHXrl2KaXtv3rwJk3zTBycmJmLYsGGIj49H5cqVERAQgGPHjqFBvkv2EyZMQGpqKoYPH46kpCS0bdsWu3btUjnLIlVAiYnSJCIAEB4uTa+9axeQnW0Y//AZjJMuWFkBnToBf/4pBcnNmpV9mX/9Jf01khQVIiJVZEJofr1x48aNCA0NRceOHRU54//88w/27duH9evXqz0Rgb5KSUmBg4MDkpOTYW9vr+vqkLbt2wd07AjUqAFERwNubtKl8H37gFdf1XXtiiYEYG8PPH0qzUhYv76ua0QVycqVwNChwEsvAUXMlKwVN29KnUZNTID794GqVcu2PCIyOMYSr5UoTaVPnz44ceIEnJyc8Oeff+LPP/+Ek5MTTp48afCBOFUA8nzxgADpH31IiHTfEFJV4uOlQNzERPoxQVSeunWT/p46BWiYkqgxecfN1q0ZiBORUStRmgoABAQEYO3atdqsC1H5yB+MA9Il8NWrpWD86691Vi21yFNUfH0BjgBE5c3NDQgMlFrFd+yQWsnLClNUiKiCKFHL+I4dO7B79+4C63fv3o2dhjQqBVVMLwbjnTtLueLR0cDVq7qrlzqYL066Jg+Oy/JKUmoqsH+/cnlEREaqRMH4pEmTkJOTU2C9EAKTJk0qdaWIykxSEhATIy37+0t/7eyAl1+WlvU9VYXBOOmaPDjes0eaBKgs7NsHZGZKV4A4nj4RGbkSBePR0dFKo5fI1atXTzH5DpFekg9p6OOjnIdaHq192sBgnHTNzw+oVg1ISwMOHiybMvKnqMhkZVMGEZGeKFEw7uDggOvyoeHyuXbtGmxtbUtdKaIy82KKipw8GD9yRBr6UF/J02gYjJOuyGfjBPKCZm3KzTW6WTeJiIpSomC8Z8+eGDNmDGLkl/shBeIfffQRevToobXKEWldYcF4jRrS5fCcHEBFfwi98OxZXooNg3HSpfxXkrQ9G2dkpDRSS6VK0kRDRERGrkTB+JdffglbW1vUq1cPvr6+8PX1Rb169VC1alXMnz9f23Uk0h55msqLwTig/6kqN25IAbm1NVC9uq5rQxVZhw7S+/DmTeDCBe0eW/7569yZIwYRUYVQoqENHRwccOzYMezduxf//vsvrK2t0bRpU7Rr107b9SPSnuRkacQUQHUw/tprwJdfSkO2PXsGmJV45M+yIc8Xr11bGmecSFesraWAfNs2KVWlcWPtHVsejDNFhYgqCI3+o0dERGDb8y9KmUyGzp07w8XFBfPnz0efPn0wfPhwZGZmlklFiUrt7Fnpr7e36klEWrYEqlSRcsYjIsq3bupg503SJ2VxJenuXSmVTCbLm2CIiMjIaRSMz5gxAxcvXlTcP3/+PIYNG4ZOnTph0qRJ+OuvvzBnzhytV5JIKwrLF5czMwO6dpWW9TFVhcE46RN5MH78OPDggXaOKe+4GRgIuLpq55hERHpOo2A8KioKHTp0UNz//fffERgYiGXLlmHcuHFYuHAh1q9fr/VKEmlFccE4IKWqAGUzSkRpcSQV0ifVqklj9QshpXZpA1NUiKgC0igYT0xMhGu+1opDhw6hq7wlEcBLL72EW7duaa92RNqkTjAeHAyYmgKXL+eNXKIv2DJO+kabqSrp6cDevdKy/EcxEVEFoFEw7urqitjYWABAVlYWIiMj0bJlS8XjT548gbm5uXZrSKQNKSl5wWyzZoVv5+gIyDsiyy+Z64PUVOD2bWm5bl3d1oVITh40794NZGWV7lgHDkgBefXqQJMmpa8bEZGB0CgY79atGyZNmoQjR45g8uTJsLGxURpB5dy5c6hZs6bWK0lUavLOm56egLNz0dvqY6qKfGbbqlWlTqZE+iAgQMrtfvIEOHy4dMfKn6LCWTeJqALRKBifOXMmzMzMEBQUhGXLlmHZsmWwsLBQPL5y5Up07txZ65UkKjV1UlTk5JfeDx2SWtT1AVNUSB+ZmAAhIdJyaVJVhMjbnykqRFTBaBSMOzk54fDhw0hMTERiYiJ69+6t9PiGDRsQHh6u1QoSaYUmwXidOtItOzsvh1XX2HmT9FX+K0klnY3z3Dng1i1p/PJXXtFe3YiIDECJZg5xcHCAqalpgfVVqlRRaikn0htFzbypirx1XF9SVdgyTvqqY0fAwgK4fh24cqVkx5C3infsKAXkREQVCKfxI+P35Eley7KmwfiOHUBOTtnUSxMMxklfVaqU15pd0lQV+Y9epqgQUQXEYJyMX1SUdPm8enXAxUW9fdq2BRwcpMlMTp0q0+oVS4i8HxMcSYX0kTyILkkwnpAAnDwpLXPWTSKqgBiMk/HTJF9cztwc6NJFWtZ1qsqjR0BSkrRcq5ZOq0KkkrwT5z//AI8fa7bvzp3SD85mzaSJhIiIKhgG42T8ShKMA9qd0KQ05CkqXl7MpyX95OMDNGokpXTt2qXZvkxRIaIKjsE4GT95MF7UZD+qdO0qDd127hwQF6f9eqmLI6mQIShJqkpmJrBnj7Qs//FLRFTBMBgn4/b0ad4ID5q2jFetCrRuLS3rcjZOdt4kQyAPpnfulIYFVcfhw9Jn1M1N8x/LRERGgsE4GTd5500PD+kfvqb0IVVFHoyz8ybpsxYtACcnqX/DsWPq7SNPUeneXboKRURUAfHbj4xbSfPF5eSX3vfvB1JTtVMnTbFlnAyBqWneaCjq/HjNP+smU1SIqAJjME7GrbTBeP36gK+vlNv699/aq5e6cnOB6GhpmcE46TtNJsu6fBmIjQUsLaXJfoiIKigG42TcShuMy2S6TVW5dUv6IWBuDnh7l3/5RJoIDgbMzKROx/IfkYWRB+yvvgrY2pZ93YiI9BSDcTJeqakl77yZX/5RInJzS18vTchHUqlVS0oDINJn9vZAUJC0XFynZ6aoEBEBYDBOxuzff6Xg2d1dupVU+/bSlN/x8UBkpPbqpw7mi5OhUSdV5dGjvE6e8gmDiIgqKAbjZLxKm6IiZ2kJdO4sLZd3qgpHUiFDI7+SdPgwkJysepudO6Ufyk2aMP2KiCo8BuNkvEo62Y8q8gBDnY5p2sSWcTI0NWsC9eoBz57lTejzIqaoEBEpMBgn46WtlnFAmo1TJpPSVO7cKf3x1MVgnAxRUakq2dnArl3K2xERVWAMxsk4paUBly5Jy9oIxl1dgcBAaXnHjtIfTx0ZGcCNG9Iyg3EyJPIrSTt2ADk5yo8dPSqlrzg7532miIgqMAbjZJzknTddXaXZN7WhvFNVYmKkiVHs7QEXl/Ipk0gbWrcGHB2ljponTig/Jk9R6daNIwQREYHBOBmr/CkqMpl2jim/pP7330B6unaOWZT8KSraOgei8mBmJqV2AQV+vD7680+4ALhRgVrFHz58CBcXF9y+fVvXVSEiPcRgnIyTNvPF5Zo0ATw9pUD8wAHtHbcwHEmFDFn+8fnl/vsPs65fR0+ZDD5vvaVYPWrUKAQEBMDS0hJ+fn4FDnXw4EH07NkT7u7usLW1hZ+fH3755ReNqySEwLRp0+Du7g5ra2t07NgR0cVNTpTPF198AZlMhjFjxiitj4mJQe/eveHs7Ax7e3v0798fCQkJisednJwwaNAghIeHa1xnIjJ+DMbJOJVFMJ5/Ns7ySFVh500yZMHBUhrKhQuKvg9pmzZhBYChzZtL6Vf5vPPOOwgNDVV5qGPHjqFJkybYuHEjzp07hyFDhmDQoEHYpuFQo19++SUWLlyIJUuW4MSJE7C1tUVwcDAyMjKK3ffUqVNYunQpmjRporQ+NTUVnTt3hkwmw/79+/HPP/8gKysLr732GnLzTRI2ZMgQ/PLLL3j8+LFGdSaiCkBQAcnJyQKASE5O1nVVqCTS0oQwNRUCEOLWLe0ee/t26bjVqwuRm6vdY7+obVuprN9+K9tyiMpK+/bSe3jRIiGEEBsaNBDOgBALFqjcPDw8XDRt2lStQ3fr1k0MGTJE7ark5uYKNzc3MW/ePMW6pKQkYWlpKX4r5jP25MkTUbt2bbF3714RFBQkRo8erXhs9+7dwsTEROn/RVJSkpDJZGLv3r1Kx/H19RXLly9Xu85EVDRjidfYMk7G59w5aQQHFxegWjXtHvvVVwEbG+D2bamcsnT1qvSXLeNkqPKnqiQl4cjlywgAtDKkYXJyMqpUqaL29rGxsYiPj0fHjh0V6xwcHNCiRQtEREQUue+IESMQEhKitK9cZmYmZDIZLC0tFeusrKxgYmKCo0ePKm0bGBiII0eOqF1nIqoYGIyT8SmLzptyVlaA/B9yWaaqJCYCDx5Iy7Vrl105RGVJHnQfOABs3Ig4IeDh4CBNDFQK69evx6lTpzBkyBC194mPjwcAuLq6Kq13dXVVPKbK77//jsjISMyZM0fl4y1btoStrS0mTpyItLQ0pKam4uOPP0ZOTg7u3buntK2Hhwfi4uLUrjMRVQw6D8YXL14MHx8fWFlZoUWLFjh58qRa+/3++++QyWTo1auX0vqEhAQMHjwYHh4esLGxQZcuXTTqoENGQJszb6oiDzA0zFfViPw96+4O2NmVXTlEZaluXSnwzsoCpkxBOgArX99SHfLAgQMYMmQIli1bhoYNG2qnnoW4desWRo8ejV9++QVWVlYqt3F2dsaGDRvw119/oVKlSnBwcEBSUhKaNWsGExPlf7HW1tZIS0sr0zoTkeHRaTC+bt06jBs3DuHh4YiMjETTpk0RHByM+/fvF7nfjRs38PHHH6Ndu3ZK64UQ6NWrF65fv44tW7bg7Nmz8Pb2RseOHZGamlqWp0L6pCw6b+YXEiL9PXkSyDdiglZxJBUyBjJZXqpKfDycACQ6OZX4cIcOHcJrr72Gb775BoMGDdJoXzc3NwBQGuVEfl/+2IvOnDmD+/fvo1mzZjAzM4OZmRkOHTqEhQsXwszMDDnPJzTq3LkzYmJicP/+fTx8+BBr1qzBnTt3UKNGDaXjPX78GM7OzhrVm4iMn06D8a+//hrDhg3DkCFD0KBBAyxZsgQ2NjZYuXJlofvk5OTgzTffxGeffVbgiy46OhrHjx/HDz/8gJdeegl169bFDz/8gPT0dPz2229lfTqkDzIygIsXpeWyCsY9PKRjC1F2s3FyJBUyFvnyw/2trXGpmMaWwhw8eBAhISGYO3cuhg8frvH+vr6+cHNzw759+xTrUlJScOLECbRq1UrlPh06dMD58+cRFRWluDVv3hxvvvkmoqKiYPrCpEVOTk5wdHTE/v37cf/+ffTo0UPp8QsXLsDf31/juhORcdNZMJ6VlYUzZ84odYgxMTFBx44di+xMM2PGDLi4uGDo0KEFHsvMzAQApcuJJiYmsLS0LNCR5sX9UlJSlG5koM6dA549A5ycpDHBy0pZp6owGCdj0a6dYhjD4FdewcVLl5CYmKi0ybVr1xAVFYX4+Hikp6crAt+srCwAUmpKSEgIRo0ahT59+iA+Ph7x8fEaDRMoHx/8888/x9atW3H+/HkMGjQIHh4eSumOHTp0wHfffQcAsLOzQ6NGjZRutra2qFq1Kho1aqTYZ9WqVTh+/DhiYmKwdu1a9OvXD2PHjkXdfFe20tLScObMGXTu3Fnjp5CIjJvOgvGHDx8iJydHo840R48exYoVK7Bs2TKVj9erVw9eXl6YPHkyEhMTkZWVhblz5+L27dsFOtLkN2fOHDg4OChunmUZxFHZKsvOm/nJL73v2QM8/xGoVRxJhYyFhQXwxhsAgMYffohmzZph/fr1Spu8++678Pf3x9KlS/Hff//B398f/v7+uHv3LgDgp59+QlpaGubMmQN3d3fF7fXXX1cc4+DBg5DJZLjxfExzVSZMmICRI0di+PDheOmll/D06VPs2rVLqQEnJiYGDx8+1OgUr169il69eqF+/fqYMWMGPv30U8yfP19pmy1btsDLy6tAeiURkc7GGb9z544AII4dO6a0fvz48SIwMLDA9ikpKcLHx0fs2LFDsS4sLEz07NlTabvTp0+Lpk2bCgDC1NRUBAcHi65du4ouXboUWpeMjAyRnJysuN26dcsoxq2skIYOlcY1/uSTsi0nJ0cId3eprN27tXvs3FwhbGykY1+5ot1jE+lCeroQV68KIYTYtm2bqF+/vsjJydFqEStXrhS1atUSWVlZWj2utrRo0UL88ssvuq4GkVExlnHGzXT1I8DJyQmmpqZqd6aJiYnBjRs38Jq8RRJQzG5mZmaGq1evombNmggICEBUVBSSk5ORlZUFZ2dntGjRAs2bNy+0LpaWlkpjxJIBK+vOm3ImJlJHzuXLpVQVbV56vnsXSEuTZi8s5cgTRHrBykpxlSckJATR0dG4c+eOVq9C7tixA7Nnz4a5ubnWjqktDx8+xOuvv44BAwbouipEpIdkQgihq8JbtGiBwMBALFq0CIAUXHt5eeHDDz/EpEmTlLbNyMjAtWvXlNZNmTIFT548wbfffos6derAwsKiQBnR0dGoV68edu7cqXauXkpKChwcHJCcnAz7F6ZsJj2WmQlUqiTljN+4AXh7l215W7cCPXtKAXNMjPbSYg4ckCYXql07L3eciIiIlBhLvKazlnEAGDduHMLCwtC8eXMEBgZiwYIFSE1NVUzkMGjQIFSrVg1z5syBlZWVUocZAHB0dAQApfUbNmyAs7MzvLy8cP78eYwePRq9evVip5mK4Px5KRCvWhXw8ir78jp0ACwtgdhY4NIlQFtjHrPzJhERUYWh02A8NDQUDx48wLRp0xAfHw8/Pz/s2rVL0anz5s2bBSZNKM69e/cwbtw4JCQkwN3dHYMGDcLUqVPLovqkb/JP9lOWnTflbG2lFuydO6VUFW0F4+y8SUREVGHoNE1FXxnLZY8KZ/hwYNkyYNIkoJCpq7Xuhx+ADz4A2rYFjhzRzjG7dwe2b5eO/f772jkmERGRkTGWeE2nk/4QaVV5dd7MTz4b57FjwKNH2jkm01SIiIgqDAbjZBwyM6WccaB8g3EvL6BJEyA3V0pXKa3sbOD6dWk534QhREREZJwYjJNxuHBBCmQrVwZ8fMq3bPlwm9qYjTM2FsjJAWxsAA+P0h+PiIiI9BqDcTIO5TXzpirdu0t/d+2SfhCURv4UlfI+DyIiIip3DMbJOOgiX1zupZcAZ2cgORk4erR0x+JIKkRERBUKg3EyDroMxk1N8zpyljZVhZ03iYiIKhQG42T4srJ003kzP3mqyl9/le44DMaJiIgqFAbjZPguXpQCckdHaWp6XejUCTA3B6KjSzeFvXxfjqRCRERUITAYJ8NX3jNvqmJvD7z8srRc0lSVp0+Bu3el5dq1tVItIiIi0m8Mxsnw6TJfPL/SpqpER0t/nZ2lIRqJiIjI6DEYJ8Onb8H4kSNAUpLm+3MkFSIiogqHwTgZtuxs4Nw5aVnXwXiNGkCDBtKkPbt3a74/O28SERFVOAzGybBdvAhkZgIODkDNmrquTelSVRiMExERVTgMxsmw6UPnzfxee036u3Mn8OyZZvtyJBUiIqIKh8E4GTZ9yReXa9kSqFIFePwYOH5c/f2EYMs4ERFRBcRgnAybvgXjZmZA167SsiapKg8eAMnJUuu+PqTbEBERUblgME6GKzsb+PdfaVlfgnEgL1VFk/HG5SOpeHsDVlbarxMRERHpJQbjZLguX5Y6b9rZ6VdrcnAwYGoKXLoEXL+u3j5MUSEiIqqQGIyT4crfedNEj97Kjo5Au3bSsrqt4wzGiYiIKiQ9imCINKRv+eL5aZqqwpFUiIiIKiQG42S49DkYl483fvAg8ORJ8duzZZyIiKhCYjBOhunZM/3svClXpw5Qu7bUyXTPnqK3zckBrl3L24+IiIgqDAbjZJguXwbS06XOm7Vr67o2qqmbqhIXB2RlAZaWgKdn2deLiIiI9AaDcTJM8hQVf3/96ryZnzxVZft2qfW7MPIUlVq1pFFYiIiIqMLQ0yiGqBj6nC8u17Yt4OAgTehz6lTh2zFfnIiIqMJiME6GyRCCcXNzoEsXabmoVBWOpEJERFRhMRgnw5OTA0RFScvNmum0KsWSp6r89Vfh27BlnIiIqMJiME6G58oVqfOmra3+B7Bdu0o57efOATdvqt7m6lXpr76fCxEREWkdg3EyPPk7b+p7h8eqVYHWraXl7dsLPp6enhekMxgnIiKqcBiMk+ExhHzx/IpKVZGPL+7oCDg5lVuViIiISD8wGCfDY6jB+P79QGqq8mP5O2/KZOVbLyIiItI5BuNkWHJygLNnpWVDCcYbNAB8fYHMTGDfPuXH2HmTiIioQmMwTobl6lUgLU3qvGkoQwHKZIWnqjAYJyIiqtAYjJNhkaeo+Pnpf+fN/PLPxpmbm7eeI6kQERFVaAzGybAYWr64XFAQUKkScO9eXpoNwJZxIiKiCo7BOBkWQw3GLS2Bzp2lZXmqyqNHwKNHeATApVMn3LhxQ1e107qWLVti48aNuq4GERGR3mMwToYjNzevVVnfZ95U5bXXpL/btkl/o6MBALMqVULPXr3g4+OjtPnq1avRpEkTWFlZwcXFBSNGjNC4yA0bNqBevXqwsrJC48aNsWPHDrX3/eeff2BmZgY/Pz+l9Tk5OZg6dSp8fX1hbW2NmjVr4v/t3Xtcjvf/B/DXXXdn5FBJOs0xoeR8tqaJr5HD9zuskcMOthppcpiRwxyyMWa++bIYM8P8lrO2nFrkmN2IJJFI5dSJUOrz+6N1z62DO7rv61av5+NxP3Z3nV6f60rX3l19Pp973rx5EEIot/nyyy8xbdo0FD7bJYeIiIhKYDFOr4/Ll4umBjQxAZycpG5NxfXrVzSYMyYGuHULuHwZuQBCHz3CuHHjVDZdunQpZsyYgWnTpuHChQvYv38/PD09KxQXHR2NESNGYNy4cfjrr78waNAgDBo0CLGxsS/cNzMzE6NGjULv3r1LrAsODkZISAi+//57xMXFITg4GIsXL8aKFSueOdV+yMnJwb59+yrUZiIioupGJp59nEUAgOzsbJibmyMrKwu1atWSujlU7OefgfffB7p0AaKjpW7Ny+ncGThxAli9GkhKwrYFC/CpsTFuP3qk3CQjIwMNGzbErl27Si2G1TVs2DA8fPgQu4ufxKOo+0ibNm2watWqcvcdPnw4mjZtCn19fWzfvh0KhUK57p133kH9+vURGhqqXDZ06FCYmJhg48aNymVjx45Ffn4+fvrpp5c+ByIiorJUlXqNT8bp9fG69hd/1rNdVS5fRhSAds91T4mIiEBhYSFSUlLQokUL2Nra4t1338WNGzcqFHXs2DF4eHioLPP09MSxY8fK3W/dunW4evUqgoKCSl3ftWtXHDhwAJf/Hnx69uxZHDlyBP369VPZrmPHjoiKiqpQm4mIiKobFuP0+qgKxXjxFIcREcC5c7gOwMbOTmWTq1evorCwEAsWLMCyZcuwbds23L9/H2+//Tby8vLUjkpLS0P9+vVVltWvXx9paWll7pOQkIBp06Zh48aNkMvlpW4zbdo0DB8+HE5OTjAwMICbmxv8/f3h7e2tsp2NjQ1u3LjBfuNERETlKP3/tkS65tnBm69zMe7iAtjZATduAJcv4xEAY0tLlU0KCwuRn5+P7777Dn3+noHll19+gbW1NQ4dOlThvuPqKigowHvvvYc5c+agWTlTLW7duhU///wzNm3ahJYtW0KhUMDf3x82Njbw8fFRbmdiYoLCwkI8efIEJiYmGmkzERHR607yJ+MrV66Eo6MjjI2N0alTJ5w8eVKt/TZv3gyZTIZBgwapLH/w4AH8/Pxga2sLExMTODs7v7B/LL0GEhKAnJyiwZstWkjdmpf37KdxArCQyZDx3JPjBg0aAACcnZ2VyywtLWFhYYHk5GS1o6ytrZGenq6yLD09HdbW1qVun5OTg9OnT8PPzw9yuRxyuRxz587F2bNnIZfLcfDgQQBAYGCg8ul469atMXLkSEyaNAkLFy5UOd79+/dhZmbGQpyIiKgckhbjW7ZsQUBAAIKCgnDmzBm4urrC09MTt2/fLne/pKQkTJ48GT169CixLiAgAOHh4di4cSPi4uLg7+8PPz8/7Ny5U1OnQdpQ3EXF1RUoo/vEa+OZYtzNwgIX4+JUVnfr1g0AEF/86ZwoKmzv3r0LBwcHtWO6dOmCAwcOqCyLiIhAly5dSt2+Vq1aOH/+PBQKhfI1fvx4NG/eHAqFAp06dQIA5ObmQk9P9dahr69fojtKbGws3Nzc1G4vERFRdSRpMb506VJ8+OGHGDNmjPIJtqmpKdauXVvmPgUFBfD29sacOXPQqFGjEuujo6Ph4+ODN998E46Ojvjoo4/g6uqq9hN30lFVob94MXf3oif8ADydnXHhwgVkZGQoVzdr1gxeXl6YOHEioqOjERsbCx8fHzg5OcHd3V3tmIkTJyI8PBxLlizBpUuXMHv2bOWT72LTp0/HqFGjAAB6enpo1aqVysvKygrGxsZo1aoVzMzMAAADBgzA/PnzsWfPHiQlJSEsLAxLly7F4MGDVfKjoqKU3WyIiIiodJIV43l5eYiJiVGZ7UFPTw8eHh7lzvYwd+5cWFlZlZiXuVjXrl2xc+dOpKSkQAiBQ4cO4fLly+UWBU+ePEF2drbKi3RMcTH+On7Yz/NMTIC33wYAtG7fHm3btsXWrVtVNtmwYQM6deqE/v37o1evXjAwMEB4eDgMDAyU28hkMvz4449lxnTt2hWbNm3C6tWr4erqim3btmH79u1o1aqVcpvU1NQKdX0BgBUrVuDf//43Pv30U7Ro0QKTJ0/Gxx9/jHnz5im3SUlJQXR0NMaMGVOhYxMREVU7QiIpKSkCgIiOjlZZHhgYKDp27FjqPlFRUaJhw4bizp07QgghfHx8hJeXl8o2jx8/FqNGjRIAhFwuF4aGhmL9+vXltiUoKEgAKPHKysp6+ROkylNQIEStWkIAQigUUremcpw/L8S77wqRlCR2794tWrRoIQoKCtTe/erVq0Iul4vLly9rsJEvb8qUKeLDDz+UuhlERFSFZWVlVYl67bXpfJuTk4ORI0dizZo1sLCwKHO7FStW4Pjx49i5cyccHBzw559/wtfXFzY2NiXmXC42ffp0BAQEKL/Ozs6G3XPTzZGEEhOB7GzAyAh4ZlDja61VK2DLFgBAfwcHJCQkICUlRe1/d3v37sVHH32Epk2barKVL83KykrlZ4qIiIhKJ9kncObl5cHU1BTbtm1TmRHFx8cHmZmZ2LFjh8r2CoUCbm5u0NfXVy4rHjCmp6eH+Ph42NjYwNzcHGFhYejfv79yuw8++AA3b95EeHi4Wm2rKp/oVGVs3gyMGAF07Fj06ZVERERU7VWVek2yPuOGhoZo166dymwPhYWFOHDgQKmzPTg5OZWY6WHgwIFwd3eHQqGAnZ0d8vPzkZ+fr9ZMD/QaqUqDN4mIiIieIWk3lYCAAPj4+KB9+/bo2LEjli1bhocPHyoHfY0aNQoNGzbEwoULlTM6PKt27doAoFxuaGiIXr16ITAwECYmJnBwcEBkZCQ2bNiApUuXavXcqBKxGCciIqIqStJifNiwYbhz5w5mzZqFtLQ0tGnTBuHh4cqP8E5OTi7xlPtFNm/ejOnTp8Pb2xv379+Hg4MD5s+fj/Hjx2viFEjThADOnCl6z2KciIiIqhjJ+ozrsqrSB6lKuHIFaNq0aPBmTg7wzNR+REREVH1VlXpN0g/9IXqh4i4qLi4sxImIiKjKYTFOuo39xYmIiKgKYzFOuq0qffImERER0XNYjJPu4uBNIiIiquJYjJPuunYNyMwEDA2LPrGSiIiIqIphMU66q7iLSuvWRQU5ERERURXDYpx0FwdvEhERURXHYpx0F4txIiIiquJYjJNuEoLFOBEREVV5LMZJNyUlARkZRR/0w8GbREREVEWxGCfd9OzgTSMjadtCREREpCEsxkk38cN+iIiIqBpgMU66if3FiYiIqBpgMU66h4M3iYiIqJpgMU66JzkZuH8fkMuL+owTERERVVEsxkn3FD8Vb9UKMDaWti1EREREGsRinHQPu6gQERFRNcFinHQPi3EiIiKqJliMk27h4E0iIiKqRliMk265cQO4exfQ1wdcXKRuDREREZFGsRgn3VL8VLxlSw7eJCIioiqPxTjpFnZRISIiomqExTjpFhbjREREVI2wGCfdwcGbREREVM2wGCfdkZIC3LlTNHjT1VXq1hARERFpHItx0h3FT8WdnQETE2nbQkRERKQFLMZJd7CLChEREVUzLMZJd7AYJyIiomqGxTjpBg7eJCIiomqIxTjphlu3gPR0QE+PgzeJiIio2mAxTrqh+Kl4ixaAqam0bSEiIiLSEhbjpBvYRYWIiIiqIRbjpBtYjBMREVE1xGKcdAOLcSIiIqqGWIyT9FJTgbS0osGbbdpI3RoiIiIirWExTtL7+6n4vSZNYPXGG0hKSpK2PZXk7t27sLKyws2bN6VuChEREekoFuMkvb+L8fn6+vDy8oKjo2OJTe7duwdbW1vIZDJkZmZWOGLlypVwdHSEsbExOnXqhJMnT6q97+bNmyGTyTBo0CCV5TKZrNTX119/DQCwsLDAqFGjEBQUVOH2EhERUfXAYpykFxODXACh165h3LhxpW4ybtw4uLi4vNTht2zZgoCAAAQFBeHMmTNwdXWFp6cnbt++/cJ9k5KSMHnyZPTo0aPEutTUVJXX2rVrIZPJMHToUOU2Y8aMwc8//4z79++/VNuJiIioamMxTtKLicFeAEbGxujcuXOJ1SEhIcjMzMTkyZNf6vBLly7Fhx9+iDFjxsDZ2RmrVq2Cqakp1q5dW+5+BQUF8Pb2xpw5c9CoUaMS662trVVeO3bsgLu7u8q2LVu2hI2NDcLCwl6q7URERFS1sRgnaaWlAbduIQpAuw4dSqy+ePEi5s6diw0bNkBPr+L/XPPy8hATEwMPDw/lMj09PXh4eODYsWPl7jt37lxYWVmV+bT+Wenp6dizZ0+p23bs2BFRUVEVbjsRERFVfSzGSVp/9xe/XqMGbOzsVFY9efIEI0aMwNdffw17e/uXOvzdu3dRUFCA+vXrqyyvX78+0tLSytzvyJEjCA0NxZo1a9TKWb9+PWrWrIkhQ4aUWGdjY4Pr169XrOFERERULehEMf6yg+tedmAd6ZC/i/FHNWvC2NhYZdX06dPRokULvP/++1ptUk5ODkaOHIk1a9bAwsJCrX3Wrl0Lb2/vEucAACYmJsjNza3sZhIREVEVIHkx/rKD6151YB3piL+LcYsGDZCRkaGy6uDBg/j1118hl8shl8vRu3fvom0tLNSeocTCwgL6+vpIT09XWZ6eng5ra+tS90lMTERSUhIGDBigzN6wYQN27twJuVyOxMREle2joqIQHx+PDz74oNTj3b9/H5aWlmq1l4iIiKoXyYvxlxlcVxkD60hH/F2Mu3XqhIsXL6qs+r//+z+cPXsWCoUCCoUCP/zwA4Ci4tfX11etwxsaGqJdu3Y4cOCAcllhYSEOHDiALl26lLqPk5MTzp8/r8xVKBQYOHAg3N3doVAoYPdcd5rQ0FC0a9cOrq6upR4vNjYWbm5uarWXiIiIqhe5lOHFg+umT5+uXKbO4LpnB9a9aGBc8cC69evXl7nNkydP8OTJE+XX2dnZFTgLemlpaUBKCiCTwXPUKExfswYZGRmoU6cOAKBx48Yqm9+9excA0KJFC9SuXVvtmICAAPj4+KB9+/bo2LEjli1bhocPH2LMmDHKbUaNGoWGDRti4cKFMDY2RqtWrVSOUZz3/PLs7Gz8+uuvWLJkSanZubm5iImJwYIFC9RuLxEREVUfkj4Zf5nBdZU5sK7YwoULYW5urnw9/+STNOSbb4r+6+qK1p07o23btti6dWuFDpGUlASZTIbDhw+Xuc2wYcPwzTffYNasWWjTpg0UCgXCw8NV/t0lJycjNTW1wqewefNmCCEwYsSIUtfv2LED9vb2pXanIiIiIpIJIYRU4bdu3ULDhg0RHR2t0mVgypQpiIyMxIkTJ1S2z8nJgYuLC/773/+iX79+AIDRo0cjMzMT27dvLzXDyckJb7/9NlasWFFmO0p7Mm5nZ4esrCzUqlXrFc6QynTxIuDqCjx9CuzdC/Trhz179iAwMBCxsbFqT2N46NAhDBkyBFevXlU+UdclnTt3xoQJE/Dee+9J3RQiIqIqJTs7G+bm5q99vSZpN5WKDq57dmBdscLCQgCAXC5HfHy8SteG4oF1W7ZsKbcdRkZGMDIyepVToYoQAvjss6JC3MsL+PsXq/79+yMhIQEpKSlq/3Vi7969+OKLL3SyEL979y6GDBlS5lNzIiIiIkmfjANAp06d0LFjR+WT68LCQtjb28PPzw/Tpk1T2fbx48e4cuWKyrIvv/wSOTk5WL58OZo1awZDQ0PlutGjRyM2NhanT5+uUJuqym9aOmvrVmDYMMDYuOgJ+RtvSN0iIiIies1UlXpN0ifjwIsH12lqYB1J5MEDICCg6P20aSzEiYiIqFqTvBgfNmwY7ty5g1mzZiEtLQ1t2rRRGVyXnJz8Uh+D/qKBdSSRr74qmkHljTeAKVOkbg0RERGRpCTvpqKLqsqfPXROfDzQujWQnw/s3Ak80/efiIiIqCKqSr0m+Yf+UDUhBDBhQlEh/q9/Ae+8I3WLiIiIiCTHYpy0IywM+OMPwNAQWL4ckMmkbhERERGR5FiMk+bl5gKTJhW9nzIFaNJE2vYQERER6QgW46R5CxcCycmAvT0wfbrUrSEiIiLSGSzGSbOuXAEWLy56/+23gKmptO0hIiIi0iEsxkmz/P2BvDygTx9g8GCpW0NERESkU1iMk+bs2gXs2QMYGADffcdBm0RERETPYTFOmvHoETBxYtH7gACgeXNp20NERESkg1iMk2Z8/TVw7RrQsCHw5ZdSt4aIiIhIJ7EYp8p37VrRDCoAsGQJUKOGtO0hIiIi0lEsxqnyTZoEPH4MvPUW8O67UreGiIiISGexGKfKtW8fsGMHIJcDK1Zw0CYRERFROViMU+V58gSYMKHo/YQJgLOztO0hIiIi0nEsxqnyLFlS9CE/1tZAUJDUrSEiIiLSeSzGqXIkJwNffVX0/ptvgFq1pG0PERER0WuAxThVjs8/L5pbvEcP4L33pG4NERER0WuBxTi9uv37gW3bAH194PvvOWiTiIiISE0sxunV5OUBfn5F7319ARcXadtDRERE9BphMU6vZvlyID4esLIC5syRujVERERErxUW4/TyUlL+KcCDg4HatSVtDhEREdHrhsU4vbzJk4GHD4EuXYBRo6RuDREREdFrh8U4vZzDh4HNm4sGa65cCejxnxIRERFRRbGCoorLz/9n0Ob48YCbm7TtISIiInpNsRinivv+e+DCBaBevX8+6IeIiIiIKozFOFVMauo/H3W/aBFQt6607SEiIiJ6jbEYp4qZOhXIyQE6dADGjpW6NURERESvNRbjpL4jR4CffuKgTSIiIqJKwmqK1PP0adEnbALABx8UPRknIiIiolfCYpzUs2oVcO4cUKcOsGCB1K0hIiIiqhJYjNOL3b4NfPll0fv58wELC2nbQ0RERFRFsBinF5s2DcjKKppP/KOPpG4NERERUZXBYpzKd/w4sG5d0fuVKwF9fWnbQ0RERFSFsBinshUU/DNoc/RooEsXSZtDREREVNWwGKeyrVkDnDkDmJsDwcFSt4aIiIioymExTqW7dw+YMaPo/bx5gJWVtO0hIiIiqoJYjOuYe/fuwcrKCklJSdLmf/YZcP8+4OICfPLJSx8vLy8Pjo6OOH36dCW28vXJJyIiIioPi3EdM3/+fHh5ecHR0REAcPbsWYwYMQJ2dnYwMTFBixYtsHz58pc69sqVK+Ho6AhjY2N06tQJJ0+eLD2/a1c4bt4MALg3fz76vvMO6tSpA5lMBhMTE/j5+SE7O1u5T1xcHAYOHAhzc3OYmZmhQ4cOSE5OBgAYGhpi8uTJmDp1qlr5Zdm8eTNkMhkGDRpUYp26+URERES6hsW4DsnNzUVoaCjGjRunXBYTEwMrKyts3LgRFy5cwIwZMzB9+nR8//33FTr2li1bEBAQgKCgIJw5cwaurq7w9PTE7du3S+YnJABCAO+/D71u3dC9e3cYGBigQ4cOaNu2Lfbv34/x48cDABITE9G9e3c4OTnh8OHDOHfuHGbOnAljY2Plcb29vREZGYlJkyaVm1+WpKQkTJ48GT169CixTt38I0eO4MKFCxW6ZkRERESaJhNCCKkboWuys7Nhbm6OrKws1KpVS2u527Ztw6effvrCAtXX1xdxcXE4ePCg2sfu1KkTOnTooCziCwsLYWdnh88++wzTpk37J3/sWNzOyQFq1gTi41FgZYWePXti7NixiIqKQmZmJt566y18/fXXuHHjBoYPHw4DAwP89NNP5ebXqlULzZs3x6lTp8rML01BQUGJ/O3btyvXq5v/1ltvoVu3bpg3b546l4uIiIh0nFT1WmXjk3EdEhUVhXbt2r1wu6ysLNStW1ft4+bl5SEmJgYeHh7KZXp6evDw8MCxY8f+yY+IQLvHj4u+mD0baNAAc+fOhZWVlfJp/aNHj/Dbb7+hV69eKCwsxJ49e9CsWTN4enrCysoKnTp1UimWi/MfPHiAR48elZtfmufzn6VuPgB07NgRUVFRL7hSRERERNrFYlyHXL9+HTY2NuVuEx0djS1btuCjCnwS5t27d1FQUID69eurLK9fvz7S0tL+yY+IgE1+PuDsDHz2GY4cOYLQ0FCsWbMGI0aMwMaNG/HHH3+gVq1a+OGHH3D79m08ePAAixYtQt++ffHHH39g8ODBGDJkCCIjI1XyhRC4d+9eufnPeza/NOrmA4CNjQ2uX7+u9jUjIiIi0ga51A2gfzx69Eilr/PzYmNj4eXlhaCgIPTp06dyw//6C4+uXYMxAHz/PXIeP8bIkSOxZs0aWFhY4Ntvv8Xjx49x69YtJCYmIiAgAF9++SUAwMvLC5MmTQIAtGnTBtHR0Vi1ahV69eqlEvHkyRO1m5OTk6OSX5rCwkK1801MTJCbm6t2PhEREZE2SP5k/GVn2HjZ2TV0mYWFBTIyMkpdd/HiRfTu3RsfffSRsgiuyHH19fWRnp6usjw9PR3W1tZAYSHg5wcLABn29oC7OxITE5GUlIQBAwZALpfD1tYWO3bswKlTp3Dp0iWEhIQgPz8fcrkczs7OKsdt0aKFyvW2sLCAnp4eatSoUXp+KZ7Pl8vl2LBhA3bu3Am5XI7ExERYWFiolQ8A9+/fh6WlZYWuGxEREZGmSVqMqzPDR2ledXYNXeXm5oaLFy+WWH7hwgW4u7vDx8cH8+fPr/BxDQ0N0a5dOxw4cEC5rLCwEAcOHECXLl2An34CoqPhZmiIi38XzE5OTjh//jwUCoXyNXDgQLi7uyM0NBQAIIRAhw4dEB8fr5J3+fJlODg4qOTXqVMHpqampeeXorx8hUIBOzs7GBoaqpUPFP1Vwc3NrcLXjoiIiEiTJO2msnTpUnz44YcYM2YMAGDVqlXYs2cP1q5dW+YMGwUFBfD29sacOXOUs2s8a8aMGfjXv/6FxYsXK5c1btxYY+dQKSIigJwceOrrY3psLDI2bECdv4vi2ORkvBUUBM82bRDQvDnS/i6E9fX0YGlurnZEQPfu8FmxAu0BdGzaFMt278bDzEyMsbAApkwBAEQ2aoTzly4hIyMDderUQatWrbB3716kp6ejQ4cOkMvlePjwIRYvXoxu3brB0dERgYGBGDZsGHr27Al3d3eEh4dj165dOHz4sEq+TCbD1atXsX79enTs2BHLli3Dw4cPld97ABg1ahQaNmyIhQsXwtjYGK1atVI5Ru3atQFAZbm6+VFRUZxJhYiIiHSPkMiTJ0+Evr6+CAsLU1k+atQoMXDgwDL3mzVrlhg0aJAQQggfHx/h5eWlXFdQUCBq1Kgh5s6dK/r06SMsLS1Fx44dS2Q87/HjxyIrK0v5unHjhgAgsrKyXvb0KsbZWYiimb1FR0Cs+vu9AEQQIFDKy+GZba79vezQM8tKe60AhD0gDP/OOf7s+ubNRa+ePYWFhYVYtWqVsmkHDx4UXbp0Eebm5kJfX1+YmZmJqVOnioyMDOU2wcHBAoAwMDAQrq6uYvv27SqnFx0dLWrXri2WLFki7O3thaGhoejYsaM4fvy4yna9evUSPj4+ZV6m57/fxUJDQ0WTJk2EsbFxufm5ubnqf0+IiIhIp2VlZWm3XtMQyeYZv3XrFho2bIjo6GiVrgpTpkxBZGQkTpw4UWKfI0eOYPjw4VAoFLCwsMDo0aNV5p1OS0tDgwYNYGpqiq+++kr5pPSLL77AoUOHSgwoLDZ79mzMmTOnxHKtzVv5/vtAUhIAYM/9+whMSkKsmxv0ZDK1dj+UmYkhly7havv2qCN/iT92GBkBCxcCHTtiz549CAwMRGxsLPT01OvFdOjQIQwZMgRXr15FnTp1SqwfNmwYXF1d8cUXX1S8bZVA6nwiIiKqfFVlnvHXZjaVyp5d41nTp09HQECA8uvs7GzY2dlV8hmUY+NG5dv+ABKWLUPK0KFqt2FvYCC+8PFBncDAV25K//79kZCQgJSUFPXz9+7FF198UWohnpeXh9atWyu/H9omdT4RERFReSR7Mp6XlwdTU1Ns27ZNZUYUHx8fZGZmYseOHSrbKxQKuLm5QV9fX7msuPjW09NDfHw87OzsYGZmhqCgIJUZR6ZOnYojR47g6NGjarWtqvymRURERFRVVZV6TbLZVF44w8dzKnt2DSIiIiIiqUnaTSUgIAA+Pj5o3759qTNsaHJ2DSIiIiIiqUlajA8bNgx37tzBrFmzkJaWhjZt2iA8PFz5se3JyclqDyIsNnjwYKxatQoLFy7EhAkT0Lx5c/zf//0funfvrolTICIiIiJ6aZL1GddlVaUPEhEREVFVVVXqNUk/gZOIiIiIqDpjMU5EREREJBEW40REREREEmExTkREREQkERbjREREREQSYTFORERERCQRFuNERERERBJhMU5EREREJBEW40REREREEmExTkREREQkERbjREREREQSYTFORERERCQRFuNERERERBKRS90AXSSEAABkZ2dL3BIiIiIiKk1xnVZct72uWIyXIicnBwBgZ2cncUuIiIiIqDw5OTkwNzeXuhkvTSZe918nNKCwsBC3bt1CzZo1IZPJNJ6XnZ0NOzs73LhxA7Vq1dJ4ni7lM5vf8+qSLXV+dc2WOr+6ZkudX12zpc7XdrYQAjk5ObCxsYGe3uvb85pPxkuhp6cHW1tbrefWqlVLkh9cXchntjSq67nzule/bKnzq2u21PnVNVvqfG1mv85PxIu9vr9GEBERERG95liMExERERFJhMW4DjAyMkJQUBCMjIyqXT6z+T2vLtlS51fXbKnzq2u21PnVNVvqfKnP/XXFAZxERERERBLhk3EiIiIiIomwGCciIiIikgiLcSIiIiIiibAYJyIiIiKSCItxCS1cuBAdOnRAzZo1YWVlhUGDBiE+Pl4r2SEhIXBxcVFOzN+lSxfs27dPK9nPW7RoEWQyGfz9/bWSN3v2bMhkMpWXk5OTVrIBICUlBe+//z7q1asHExMTtG7dGqdPn9ZKtqOjY4lzl8lk8PX11Xh2QUEBZs6ciTfeeAMmJiZo3Lgx5s2bB22NIc/JyYG/vz8cHBxgYmKCrl274tSpU5We8+eff2LAgAGwsbGBTCbD9u3bVdYLITBr1iw0aNAAJiYm8PDwQEJCgtbyf/vtN/Tp0wf16tWDTCaDQqHQSnZ+fj6mTp2K1q1bw8zMDDY2Nhg1ahRu3bql8Wyg6OfeyckJZmZmqFOnDjw8PHDixIlKyVYn/1njx4+HTCbDsmXLtJI9evToEj/zffv21Uo2AMTFxWHgwIEwNzeHmZkZOnTogOTkZK3kl3a/k8lk+PrrrzWe/eDBA/j5+cHW1hYmJiZwdnbGqlWrXjlXnez09HSMHj0aNjY2MDU1Rd++fSvtPqNO7fL48WP4+vqiXr16qFGjBoYOHYr09PRKya+KWIxLKDIyEr6+vjh+/DgiIiKQn5+PPn364OHDhxrPtrW1xaJFixATE4PTp0/jrbfegpeXFy5cuKDx7GedOnUK//vf/+Di4qLV3JYtWyI1NVX5OnLkiFZyMzIy0K1bNxgYGGDfvn24ePEilixZgjp16mgl/9SpUyrnHRERAQD4z3/+o/Hs4OBghISE4Pvvv0dcXByCg4OxePFirFixQuPZAPDBBx8gIiICP/30E86fP48+ffrAw8MDKSkplZrz8OFDuLq6YuXKlaWuX7x4Mb777jusWrUKJ06cgJmZGTw9PfH48WOt5D98+BDdu3dHcHBwpeSpm52bm4szZ85g5syZOHPmDH777TfEx8dj4MCBGs8GgGbNmuH777/H+fPnceTIETg6OqJPnz64c+eOVvKLhYWF4fjx47CxsamUXHWz+/btq/Kz/8svv2glOzExEd27d4eTkxMOHz6Mc+fOYebMmTA2NtZK/rPnnJqairVr10Imk2Ho0KEazw4ICEB4eDg2btyIuLg4+Pv7w8/PDzt37tRothACgwYNwtWrV7Fjxw789ddfcHBwgIeHR6XUF+rULpMmTcKuXbvw66+/IjIyErdu3cKQIUNeObvKEqQzbt++LQCIyMhISfLr1KkjfvjhB63l5eTkiKZNm4qIiAjRq1cvMXHiRK3kBgUFCVdXV61kPW/q1Kmie/fukmSXZuLEiaJx48aisLBQ41n9+/cXY8eOVVk2ZMgQ4e3trfHs3Nxcoa+vL3bv3q2yvG3btmLGjBkaywUgwsLClF8XFhYKa2tr8fXXXyuXZWZmCiMjI/HLL79oPP9Z165dEwDEX3/9Vem5L8oudvLkSQFAXL9+XevZWVlZAoDYv39/pWaXl3/z5k3RsGFDERsbKxwcHMS3336rlWwfHx/h5eVV6VnqZA8bNky8//77Gs8uK/95Xl5e4q233tJKdsuWLcXcuXNVlmninvN8dnx8vAAgYmNjlcsKCgqEpaWlWLNmTaVmC1GydsnMzBQGBgbi119/VW4TFxcnAIhjx45Ven5VwCfjOiQrKwsAULduXa3mFhQUYPPmzXj48CG6dOmitVxfX1/0798fHh4eWssslpCQABsbGzRq1Aje3t6V9ifTF9m5cyfat2+P//znP7CysoKbmxvWrFmjlezn5eXlYePGjRg7dixkMpnG87p27YoDBw7g8uXLAICzZ8/iyJEj6Nevn8aznz59ioKCghJP40xMTLT2VxEAuHbtGtLS0lT+zZubm6NTp044duyY1tqhK7KysiCTyVC7dm2t5ubl5WH16tUwNzeHq6urVjILCwsxcuRIBAYGomXLllrJfNbhw4dhZWWF5s2b45NPPsG9e/c0nllYWIg9e/agWbNm8PT0hJWVFTp16lRuFx5NSk9Px549ezBu3Dit5HXt2hU7d+5ESkoKhBA4dOgQLl++jD59+mg098mTJwCgcr/T09ODkZGRRu53z9cuMTExyM/PV7nPOTk5wd7evlre59TBYlxHFBYWwt/fH926dUOrVq20knn+/HnUqFEDRkZGGD9+PMLCwuDs7KyV7M2bN+PMmTNYuHChVvKe1alTJ/z4448IDw9HSEgIrl27hh49eiAnJ0fj2VevXkVISAiaNm2K33//HZ988gkmTJiA9evXazz7edu3b0dmZiZGjx6tlbxp06Zh+PDhcHJygoGBAdzc3ODv7w9vb2+NZ9esWRNdunTBvHnzcOvWLRQUFGDjxo04duwYUlNTNZ5fLC0tDQBQv359leX169dXrqsuHj9+jKlTp2LEiBGoVauWVjJ3796NGjVqwNjYGN9++y0iIiJgYWGhlezg4GDI5XJMmDBBK3nP6tu3LzZs2IADBw4gODgYkZGR6NevHwoKCjSae/v2bTx48ACLFi1C37598ccff2Dw4MEYMmQIIiMjNZpdmvXr16NmzZpa6y6xYsUKODs7w9bWFoaGhujbty9WrlyJnj17ajS3uPCdPn06MjIykJeXh+DgYNy8ebPS73el1S5paWkwNDQs8Ut2dbzPqUsudQOoiK+vL2JjY7X6lK558+ZQKBTIysrCtm3b4OPjg8jISI0X5Ddu3MDEiRMRERFRaf0GK+LZJ7EuLi7o1KkTHBwcsHXrVo0/MSksLET79u2xYMECAICbmxtiY2OxatUq+Pj4aDT7eaGhoejXr1+l9l0tz9atW/Hzzz9j06ZNaNmyJRQKBfz9/WFjY6OVc//pp58wduxYNGzYEPr6+mjbti1GjBiBmJgYjWeTqvz8fLz77rsQQiAkJERrue7u7lAoFLh79y7WrFmDd999FydOnICVlZVGc2NiYrB8+XKcOXNGK3+Fet7w4cOV71u3bg0XFxc0btwYhw8fRu/evTWWW1hYCADw8vLCpEmTAABt2rRBdHQ0Vq1ahV69emksuzRr166Ft7e31v6/s2LFChw/fhw7d+6Eg4MD/vzzT/j6+sLGxkajfxE2MDDAb7/9hnHjxqFu3brQ19eHh4cH+vXrV+kD5qWoXaoiPhnXAX5+fti9ezcOHToEW1tbreUaGhqiSZMmaNeuHRYuXAhXV1csX75c47kxMTG4ffs22rZtC7lcDrlcjsjISHz33XeQy+Uaf1rzvNq1a6NZs2a4cuWKxrMaNGhQ4pedFi1aaK2bTLHr169j//79+OCDD7SWGRgYqHw63rp1a4wcORKTJk3S2l9HGjdujMjISDx48AA3btzAyZMnkZ+fj0aNGmklHwCsra0BoMSsAunp6cp1VV1xIX79+nVERERo7ak4AJiZmaFJkybo3LkzQkNDIZfLERoaqvHcqKgo3L59G/b29sp73vXr1/H555/D0dFR4/nPa9SoESwsLDR+z7OwsIBcLteJe15UVBTi4+O1ds979OgRvvjiCyxduhQDBgyAi4sL/Pz8MGzYMHzzzTcaz2/Xrh0UCgUyMzORmpqK8PBw3Lt3r1Lvd2XVLtbW1sjLy0NmZqbK9tXpPldRLMYlJISAn58fwsLCcPDgQbzxxhuStqewsFDZ10yTevfujfPnz0OhUChf7du3h7e3NxQKBfT19TXehmc9ePAAiYmJaNCggcazunXrVmIKqMuXL8PBwUHj2c9at24drKys0L9/f61l5ubmQk9P9Zajr6+vfHqmLWZmZmjQoAEyMjLw+++/w8vLS2vZb7zxBqytrXHgwAHlsuzsbJw4cUKr4zWkUlyIJyQkYP/+/ahXr56k7dHWPW/kyJE4d+6cyj3PxsYGgYGB+P333zWe/7ybN2/i3r17Gr/nGRoaokOHDjpxzwsNDUW7du20NkYgPz8f+fn5kt/zzM3NYWlpiYSEBJw+fbpS7ncvql3atWsHAwMDlftcfHw8kpOTq8V97mWwm4qEfH19sWnTJuzYsQM1a9ZU9qUyNzeHiYmJRrOnT5+Ofv36wd7eHjk5Odi0aRMOHz6slf8x1KxZs0S/eDMzM9SrV08r/eUnT56MAQMGwMHBAbdu3UJQUBD09fUxYsQIjWdPmjQJXbt2xYIFC/Duu+/i5MmTWL16NVavXq3x7GKFhYVYt24dfHx8IJdr7xYwYMAAzJ8/H/b29mjZsiX++usvLF26FGPHjtVK/u+//w4hBJo3b44rV64gMDAQTk5OGDNmTKXmPHjwQOWJ47Vr16BQKFC3bl3Y29vD398fX331FZo2bYo33ngDM2fOhI2NDQYNGqSV/Pv37yM5OVk5v3dxoWRtbf3KT63Ky27QoAH+/e9/48yZM9i9ezcKCgqU97y6devC0NBQY9n16tXD/PnzMXDgQDRo0AB3797FypUrkZKSUmnTer7ouj//i4eBgQGsra3RvHlzjWbXrVsXc+bMwdChQ2FtbY3ExERMmTIFTZo0gaenp0az7e3tERgYiGHDhqFnz55wd3dHeHg4du3ahcOHD79ytjr5QNEvvL/++iuWLFlSKZnqZvfq1QuBgYEwMTGBg4MDIiMjsWHDBixdulTj2b/++issLS1hb2+P8+fPY+LEiRg0aFClDB59Ue1ibm6OcePGISAgAHXr1kWtWrXw2WefoUuXLujcufMr51dJUk7lUt0BKPW1bt06jWePHTtWODg4CENDQ2FpaSl69+4t/vjjD43nlkWbUxsOGzZMNGjQQBgaGoqGDRuKYcOGiStXrmglWwghdu3aJVq1aiWMjIyEk5OTWL16tdayhRDi999/FwBEfHy8VnOzs7PFxIkThb29vTA2NhaNGjUSM2bMEE+ePNFK/pYtW0SjRo2EoaGhsLa2Fr6+viIzM7PScw4dOlTqz7WPj48Qomh6w5kzZ4r69esLIyMj0bt370r9Xrwof926daWuDwoK0mh28VSKpb0OHTqk0exHjx6JwYMHCxsbG2FoaCgaNGggBg4cKE6ePPnKuerkl6YypzYsLzs3N1f06dNHWFpaCgMDA+Hg4CA+/PBDkZaWpvHsYqGhoaJJkybC2NhYuLq6iu3bt1dKtrr5//vf/4SJiUml/7y/KDs1NVWMHj1a2NjYCGNjY9G8eXOxZMmSSplK9kXZy5cvF7a2tsLAwEDY29uLL7/8stLuterULo8ePRKffvqpqFOnjjA1NRWDBw8WqamplZJfFcmE0NLH3xERERERkQr2GSciIiIikgiLcSIiIiIiibAYJyIiIiKSCItxIiIiIiKJsBgnIiIiIpIIi3EiIiIiIomwGCciIiIikgiLcSIiIiIiibAYJyIqRVJSEmQyGRQKhdRNUbp06RI6d+4MY2NjtGnTRuN5jo6OWLZsmdrbq3PNfvzxR9SuXfuV21ZZ7t27BysrKyQlJam9z8WLF2Fra4uHDx9qrmFEVG2wGCcinTR69GjIZDIsWrRIZfn27dshk8kkapW0goKCYGZmhvj4eBw4cKDUbSrzup06dQofffTRS7f3dTB//nx4eXnB0dERQOm/UOTk5MDd3R3Ozs64efMmnJ2d0blzZyxdulSaRhNRlcJinIh0lrGxMYKDg5GRkSF1UypNXl7eS++bmJiI7t27w8HBAfXq1Stzu8q6bpaWljA1NX2lY2hLfn5+hffJzc1FaGgoxo0bV+Y2d+7cgbu7Ox4+fIioqCjY2toCAMaMGYOQkBA8ffr0pdtMRASwGCciHebh4QFra2ssXLiwzG1mz55dosvGsmXLlE86gaKnxYMGDcKCBQtQv3591K5dG3PnzsXTp08RGBiIunXrwtbWFuvWrStx/EuXLqFr164wNjZGq1atEBkZqbI+NjYW/fr1Q40aNVC/fn2MHDkSd+/eVa5/88034efnB39/f1hYWMDT07PU8ygsLMTcuXNha2sLIyMjtGnTBuHh4cr1MpkMMTExmDt3LmQyGWbPnv1K1w0Ajhw5gh49esDExAR2dnaYMGGCSteL57upXLp0Cd27d4exsTGcnZ2xf/9+yGQybN++XeW4V69ehbu7O0xNTeHq6opjx46VyN6+fTuaNm0KY2NjeHp64saNGyrrQ0JC0LhxYxgaGqJ58+b46aefVNbLZDKEhIRg4MCBMDMzw/z585GRkQFvb29YWlrCxMQETZs2LfV7Wmzv3r0wMjJC586dS11/48YN9OjRA+bm5jh48KDKL0Bvv/027t+/X+LfAxFRRbEYJyKdpa+vjwULFmDFihW4efPmKx3r4MGDuHXrFv78808sXboUQUFBeOedd1CnTh2cOHEC48ePx8cff1wiJzAwEJ9//jn++usvdOnSBQMGDMC9e/cAAJmZmXjrrbfg5uaG06dPIzw8HOnp6Xj33XdVjrF+/XoYGhri6NGjWLVqVantW758OZYsWYJvvvkG586dg6enJwYOHIiEhAQAQGpqKlq2bInPP/8cqampmDx5cpnnqs51S0xMRN++fTF06FCcO3cOW7ZswZEjR+Dn51fq9gUFBRg0aBBMTU1x4sQJrF69GjNmzCh12xkzZmDy5MlQKBRo1qwZRowYofIEOTc3F/Pnz8eGDRtw9OhRZGZmYvjw4cr1YWFhmDhxIj7//HPExsbi448/xpgxY3Do0CGVnNmzZ2Pw4ME4f/48xo4di5kzZ+LixYvYt28f4uLiEBISAgsLizKvU1RUFNq1a1fquvj4eHTr1g3Ozs7Yu3cvatSoobLe0NAQbdq0QVRUVJnHJyJSiyAi0kE+Pj7Cy8tLCCFE586dxdixY4UQQoSFhYlnb11BQUHC1dVVZd9vv/1WODg4qBzLwcFBFBQUKJc1b95c9OjRQ/n106dPhZmZmfjll1+EEEJcu3ZNABCLFi1SbpOfny9sbW1FcHCwEEKIefPmiT59+qhk37hxQwAQ8fHxQgghevXqJdzc3F54vjY2NmL+/Pkqyzp06CA+/fRT5deurq4iKCio3OOoe93GjRsnPvroI5V9o6KihJ6ennj06JEQQggHBwfx7bffCiGE2Ldvn5DL5SI1NVW5fUREhAAgwsLChBD/XLMffvhBuc2FCxcEABEXFyeEEGLdunUCgDh+/Lhym7i4OAFAnDhxQgghRNeuXcWHH36o0rb//Oc/4l//+pfyawDC399fZZsBAwaIMWPGlHt9nuXl5aW8PsWKz8HQ0FC4u7uLp0+flrn/4MGDxejRo9XOIyIqDZ+ME5HOCw4Oxvr16xEXF/fSx2jZsiX09P655dWvXx+tW7dWfq2vr4969erh9u3bKvt16dJF+V4ul6N9+/bKdpw9exaHDh1CjRo1lC8nJycARU+ei5X19LVYdnY2bt26hW7duqks79at2yudc3nX7ezZs/jxxx9V2u7p6YnCwkJcu3atxPbx8fGws7ODtbW1clnHjh1LzXVxcVG+b9CgAQCoXFe5XI4OHToov3ZyckLt2rWV7YyLi1PrWrRv317l608++QSbN29GmzZtMGXKFERHR5favmKPHj2CsbFxqesGDhyIqKgo/Pbbb2Xub2Jigtzc3HIziIheRC51A4iIXqRnz57w9PTE9OnTMXr0aJV1enp6EEKoLCttMJ+BgYHK1zKZrNRlhYWFarfrwYMHGDBgAIKDg0usKy5CAcDMzEztY1am8q7bgwcP8PHHH2PChAkl9rO3t3+l3Geva/EMLhW5rup6/rr269cP169fx969exEREYHevXvD19cX33zzTan7W1hYlDnIdcaMGXBxccF7770HIUSJrkcAcP/+fTRu3PjVT4SIqjU+GSei18KiRYuwa9euEoMBLS0tkZaWplKQV+bc4MePH1e+f/r0KWJiYtCiRQsAQNu2bXHhwgU4OjqiSZMmKq+KFOC1atWCjY0Njh49qrL86NGjcHZ2fqX2l3Xd2rZti4sXL5Zod5MmTWBoaFjiOM2bN8eNGzeQnp6uXHbq1KmXatPTp09x+vRp5dfx8fHIzMxUXtcWLVq89LWwtLSEj48PNm7ciGXLlmH16tVlbuvm5oaLFy+WuX7mzJmYPXs2vL29sWXLlhLrY2Nj4ebm9sI2ERGVh8U4Eb0WWrduDW9vb3z33Xcqy998803cuXMHixcvRmJiIlauXIl9+/ZVWu7KlSsRFhaGS5cuwdfXFxkZGRg7diwAwNfXF/fv38eIESNw6tQpJCYm4vfff8eYMWNQUFBQoZzAwEAEBwdjy5YtiI+Px7Rp06BQKDBx4sRXan9Z123q1KmIjo6Gn58fFAoFEhISsGPHjjIHcL799tto3LgxfHx8cO7cORw9ehRffvklAFR4/nIDAwN89tlnOHHiBGJiYjB69Gh07txZ2e0lMDAQP/74I0JCQpCQkIClS5fit99+K3fQKgDMmjULO3bswJUrV3DhwgXs3r1bWeCXxtPTExcuXCh3CsgZM2Zg3rx58Pb2xi+//KJcnpSUhJSUFHh4eFTo3ImInsdinIheG3Pnzi3R3aFFixb473//i5UrV8LV1RUnT558YdFWEYsWLcKiRYvg6uqKI0eOYOfOncoZOoqfZhcUFKBPnz5o3bo1/P39Ubt2bZX+6eqYMGECAgIC8Pnnn6N169YIDw/Hzp070bRp01c+h9Kum4uLCyIjI3H58mX06NEDbm5umDVrFmxsbEo9hr6+PrZv344HDx6gQ4cO+OCDD5SzqZTV77ospqammDp1Kt577z1069YNNWrUUHnyPGjQICxfvhzffPMNWrZsif/9739Yt24d3nzzzXKPa2hoiOnTp8PFxQU9e/aEvr4+Nm/eXOb2rVu3Rtu2bbF169Zyjztt2jQsWLAAI0eOxKZNmwAAv/zyC/r06QMHBwf1T5yIqBQy8XxnSyIiIjUcPXoU3bt3x5UrV17bvtN79uxBYGAgYmNj1f4FKi8vD02bNsWmTZtKDDQlIqooDuAkIiK1hIWFoUaNGmjatCmuXLmCiRMnolu3bq9tIQ4A/fv3R0JCAlJSUmBnZ6fWPsnJyfjiiy9YiBNRpeCTcSIiUsuGDRvw1VdfITk5GRYWFvDw8MCSJUtUPpmSiIgqhsU4EREREZFEOICTiIiIiEgiLMaJiIiIiCTCYpyIiIiISCIsxomIiIiIJMJinIiIiIhIIizGiYiIiIgkwmKciIiIiEgiLMaJiIiIiCTy/6/XsOblUcJyAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.metrics import accuracy_score\n",
        "import matplotlib.pyplot as plt\n",
        "df = pd.read_csv('Cardiovascular_Disease_Dataset.csv')\n",
        "X = df.drop('target', axis=1)  # Features\n",
        "y = df['target']                # Target variable\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Scale the features\n",
        "scaler = StandardScaler()\n",
        "X_train = scaler.fit_transform(X_train)\n",
        "X_test = scaler.transform(X_test)\n",
        "accuracy_scores = []\n",
        "k_values = range(1, 21)\n",
        "for k in k_values:\n",
        "    knn = KNeighborsClassifier(n_neighbors=k)\n",
        "    knn.fit(X_train, y_train)\n",
        "    y_pred = knn.predict(X_test)\n",
        "    accuracy = accuracy_score(y_test, y_pred)\n",
        "    accuracy_scores.append(accuracy)\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.plot(k_values, accuracy_scores, marker='o')\n",
        "plt.title('KNN Accuracy for Cardiovascular Disease Prediction')\n",
        "plt.xlabel('Number of Neighbors K')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.xticks(k_values)\n",
        "plt.grid()\n",
        "plt.ylim([0, 1])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "J-UDq3qZVHyd",
        "outputId": "d1f305e4-678d-4ab7-b512-bbfaa4c7ce7a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Support vector machine algorithm"
      ],
      "metadata": {
        "id": "vHIGzMaAVNyh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from matplotlib.cm import rainbow\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.model_selection import train_test_split\n",
        "data = {'feature1': [1, 2, 3, 4, 5],\n",
        "        'feature2': [6, 7, 8, 9, 10],\n",
        "        'target': [0, 1, 0, 1, 0]}\n",
        "df = pd.DataFrame(data)\n",
        "X = df.drop('target', axis=1)\n",
        "y = df['target']\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "svc_scores = []\n",
        "kernels = ['linear', 'poly', 'rbf', 'sigmoid']\n",
        "for i in range (len(kernels)):\n",
        "    svc_classifier = SVC(kernel = kernels[i])\n",
        "    svc_classifier.fit(X_train.values, y_train.values)\n",
        "    svc_scores.append(round(svc_classifier.score(X_test.values, y_test.values),2))\n",
        "svc_classifier = SVC(kernel = kernels[0])\n",
        "svc_classifier.fit(X_train.values, y_train.values)\n",
        "svc_prediction_result=svc_classifier.predict(X_test.values)\n",
        "print(accuracy_score(y_test.values,svc_prediction_result))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mwtPwOFQVMLF",
        "outputId": "b100fa05-9be3-4952-d8bd-be289ee513a0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score\n",
        "X = [[1, 2], [2, 3], [3, 1], [4, 3], [5, 3], [6, 2]]\n",
        "y = [0, 1, 0, 1, 0, 1]\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "kernels = ['linear', 'poly', 'rbf', 'sigmoid']\n",
        "svc_scores = []\n",
        "for kernel in kernels:\n",
        "    svc_classifier = SVC(kernel=kernel)\n",
        "    svc_classifier.fit(X_train, y_train)\n",
        "    y_pred = svc_classifier.predict(X_test)\n",
        "    accuracy = accuracy_score(y_test, y_pred)\n",
        "    svc_scores.append(accuracy)\n",
        "plt.bar(kernels, svc_scores, color=['blue', 'green', 'red', 'orange'])\n",
        "plt.xlabel('Kernel')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.title('SVC Accuracy for Cardiovascular Disease Prediction')\n",
        "plt.ylim([0, 1])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "tMY85dK7VRI2",
        "outputId": "51b0249c-d709-4e66-b765-5a7349eb8eea"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Decision tree"
      ],
      "metadata": {
        "id": "3dtHCXdxVVEG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "X = [[1, 2], [2, 3], [3, 1], [4, 3], [5, 3], [6, 2]]\n",
        "y = [0, 1, 0, 1, 0, 1]\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Convert X to a Pandas DataFrame\n",
        "X = pd.DataFrame(X)\n",
        "\n",
        "df_scores = []\n",
        "for i in range(1, len(X.columns) + 1):\n",
        "  df_classifier = DecisionTreeClassifier(max_features=i, random_state = 0)\n",
        "  df_classifier.fit(X.values, y)\n",
        "  df_scores.append(round(df_classifier.score(X_test, y_test),2))\n",
        "print (\"Done\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nRdkVTgKVVod",
        "outputId": "e0572015-ba5c-478e-c855-68d1e9e73beb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Done\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(df_scores)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qe5dt8PpVZor",
        "outputId": "d7bd1f52-9e4f-4ca7-d591-7fa0d7370066"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1.0, 1.0]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X = [[1, 2], [2, 3], [3, 1], [4, 3], [5, 3], [6, 2]]\n",
        "y = [0, 1, 0, 1, 0, 1]\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.30, random_state=0)\n",
        "dt_classifier = DecisionTreeClassifier(max_features=13, random_state = 0)\n",
        "dt_classifier.fit(X_train,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "JEiqCXCuVorb",
        "outputId": "eb5472a2-78c5-44e8-ea4b-1ef09ec943d7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DecisionTreeClassifier(max_features=13, random_state=0)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier(max_features=13, random_state=0)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;DecisionTreeClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.tree.DecisionTreeClassifier.html\">?<span>Documentation for DecisionTreeClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(max_features=13, random_state=0)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install matplotlib\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.model_selection import train_test_split\n",
        "X = [[1, 2], [2, 3], [3, 1], [4, 3], [5, 3], [6, 2]]\n",
        "y = [0, 1, 0, 1, 0, 1]\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "X = pd.DataFrame(X)\n",
        "df_scores = []\n",
        "for i in range(1, len(X.columns) + 1):\n",
        "  df_classifier = DecisionTreeClassifier(max_features=i, random_state = 0)\n",
        "  df_classifier.fit(X.values, y)\n",
        "  df_scores.append(round(df_classifier.score(X_test, y_test),2))\n",
        "print (\"Done\")\n",
        "plt.plot([i for i in range(1, len(X.columns) + 1)], df_scores, color = 'green')\n",
        "for i in range(1, len(X.columns)+1):\n",
        "  plt.text(i, df_scores[i-1], (i,df_scores[i-1]))\n",
        "plt.xticks([i for i in range(1, len(X.columns) + 1)])\n",
        "plt.xlabel('Number of Features')\n",
        "plt.ylabel('Scores')\n",
        "plt.title('Decision Tree Classifier scores for different number of features')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 820
        },
        "id": "koHT3c8HVsUp",
        "outputId": "806328fd-07e2-46b5-8c5d-af7378a40d1d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (3.7.1)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.3.0)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (4.53.1)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.4.7)\n",
            "Requirement already satisfied: numpy>=1.20 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.26.4)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (24.1)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (10.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (3.1.4)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (2.8.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib) (1.16.0)\n",
            "Done\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Decision Tree Classifier scores for different number of features')"
            ]
          },
          "metadata": {},
          "execution_count": 28
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Random forest"
      ],
      "metadata": {
        "id": "KYRlIM7sVxB_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "rf_scores = []\n",
        "estimators = [10, 20, 100, 200, 500]\n",
        "for i in estimators:\n",
        "    rf_classifier = RandomForestClassifier(n_estimators = i, random_state = 0)\n",
        "    rf_classifier.fit(X_train, y_train) # Removed .values attribute from X_train and y_train\n",
        "    rf_scores.append(round(rf_classifier.score(X_test, y_test),2))"
      ],
      "metadata": {
        "id": "7IXYfIWcWk_j"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "colors =  rainbow(np.linspace(0, 1, len(estimators)))\n",
        "plt.bar([i for i in range(len(estimators))], rf_scores, color = colors, width = 0.8)\n",
        "for i in range(len(estimators)):\n",
        "    plt.text(i, rf_scores[i], rf_scores[i])\n",
        "plt.xticks(ticks = [i for i in range(len(estimators))], labels = [str(estimator) for estimator in estimators])\n",
        "plt.xlabel('Number of Estimators')\n",
        "plt.ylabel('Scores')\n",
        "plt.title('Random Forest Classifier scores for different number of estimators')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 582
        },
        "id": "7gPIl_dRWpqd",
        "outputId": "d68ad25e-8a5f-48f9-c5e7-0690534ce2bc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Random Forest Classifier scores for different number of estimators')"
            ]
          },
          "metadata": {},
          "execution_count": 34
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Logistic regression"
      ],
      "metadata": {
        "id": "zIl1E8PoWsVU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "logistic_model = LogisticRegression()\n",
        "logistic_model.fit(X_train, y_train) # Removed .values attribute from X_train and y_train\n",
        "logistic_model_prediction= logistic_model.predict(X_test)\n",
        "print(accuracy_score(y_test, logistic_model_prediction))\n",
        "print(classification_report(y_test, logistic_model_prediction))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NGgqjnSXW6t4",
        "outputId": "f8bdc899-10df-4183-ee09-717c48534033"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.5\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.50      1.00      0.67         1\n",
            "           1       0.00      0.00      0.00         1\n",
            "\n",
            "    accuracy                           0.50         2\n",
            "   macro avg       0.25      0.50      0.33         2\n",
            "weighted avg       0.25      0.50      0.33         2\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pickle\n",
        "all_models=[rf_scores,logistic_model,dt_classifier,svc_classifier,knn_classifier]\n",
        "with open(\"models.pkl\", 'wb') as files:\n",
        "    pickle.dump(all_models, files)\n",
        "print(\"Done\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "J0D78_w5W-WZ",
        "outputId": "9a5a0880-f821-41e7-d2d6-ba2b28641403"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Done\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "open_file = open(\"models.pkl\", \"rb\")\n",
        "loaded_list = pickle.load(open_file)\n",
        "print(loaded_list)\n",
        "open_file.close()\n",
        "print(\"Done\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "t9I27UBnXDON",
        "outputId": "ed084e6f-7398-4b8c-de73-35e2d0e71da3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1.0, 0.5, 1.0, 1.0, 1.0], LogisticRegression(), DecisionTreeClassifier(max_features=13, random_state=0), SVC(kernel='sigmoid'), KNeighborsClassifier()]\n",
            "Done\n"
          ]
        }
      ]
    }
  ]
}